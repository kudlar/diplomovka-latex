%%
\section{Funkcia programu}

Program Mediátor je implementáciou aplikaèného rámca pre problém sprostredkovania správ v protokole IPFIX 
\emph{(IP Flow Information Export (IPFIX) Mediation Problem)} vyvíjaný výskumnou skupinou MONICA sídliacou
v Laboratóriu poèítaèových sietí \emph{(CNL)} na Technickej univerzite v Ko¹iciach. Je súèas»ou meracej
architektúry SLAmeter, ktorej úlohou je pasívne meranie parametrov sie»ovej prevádzky na báze tokov. 
Na základe nameraných hodnôt urèuje triedu kvality slu¾ieb a Internetového pripojenia poskytovateµov 
Internetu. Trieda kvality vypovedá o dodr¾iavaní zmluvy o úrovni poskytovanej slu¾by - \emph{SLA}.

Komponentmi architektúry IPFIX (IP Flow Information Export) podµa RFC 5470~\citep{rfc5470}
sú exportéry a kolektory komunikujúce protokolom IPFIX.
Vzhµadom k trvalému rastu IP prevádzky v heterogénnych sie»ových prostrediach,
tieto exportér-kolektor systémy mô¾u vies» k problémom ¹kálovateµnosti. Naviac,
neposkytujú flexibilitu potrebnú pre ¹iroký rad meracích aplikácii.

Mediator v1.0 je aplikaèný rámec, ktorý poskytuje rozhranie pre rozmanité sprostredkovateµské procesy.
Sprostredkovateµské moduly Mediátora mô¾u z pohµadu manipulácie s dátami poskytova» agregáciu, koreláciu,
filtrovanie, anonymizáciu 
a iné úpravy záznamov o tokoch za úèelom ¹etrenia výpoètových zdrojov meracieho systému a vykonávania 
predspracovania úloh pre kolektor. Z hµadiska interoperability nástrojov rôznych vývojárov, mô¾u 
poskytova» konverziu z iných protokolov na IPFIX, respektíve zvy¹ova» spoµahlivos» exportov
napríklad prevodom z nespoµahlivého, bezspojovo orientovaného protokolu UDP na spoµahlivý SCTP. 

Program bol v roku 2013 vytvorený Rastislavom Kudlom v rámci jeho diplomovej práce.



\section{Anal\'yza probl\'emu} \label{sec:analyza}

Výhodou monitorovania sie»ovej prevádzky na báze tokov je to, ¾e je mo¾né mera»
veµké mno¾stvo sie»ovej prevádzky v distribuovaných pozorovacích bodoch. Zatiaµ èo
tento typ monitorovania mô¾e by» pou¾itý na rôzne úèely a pre rozmanité aplikácie,
je veµmi obtia¾ne aplikova» ho paralelne na viac aplikácii s veµmi rozdielnymi po¾iadavkami. Sie»oví 
administrátori musia nastavi» parametre meracích nástrojov tak,
aby vyhoveli po¾iadavkám ka¾dej jednej monitorovacej aplikácii. Takéto konfigurácie
èasto nie sú podporované meracími nástrojmi. Èi u¾ kvôli funkèným obmedzeniam,
alebo kvôli pamä»ovým a výpoètovým limitom, ktoré zamedzujú meraniu veµkých
dátových tokov. Sprostredkovanie správ v IPFIX - \emph{IP Flow Information Export (IPFIX) Mediation} 
vypåòa túto medzeru medzi obmedzenými mo¾nos»ami merania a po¾iadavkami na monitorovacie aplikácie 
zavedením sprostredkovateµského zariadenia nazývaného IPFIX Mediátor \citep{rfc5982}.


Problematika sprostredkovania IPFIX správ je podrobne spracovaná v \citep{rfc5982}. 
Hovorí o tom, ¾e sie»oví administrátori èasto èelia problémom týkajúcim sa ¹kálovateµnosti meracieho 
systému, flexibility monitorovania na základe tokov, alebo aj spoµahlivosti exportovania.
Napriek tomu, ¾e sa vyvinuli známe techniky ako \emph{vzorkovanie a~filtrovanie  paketov}, \emph{zoskupovanie 
dátových záznamov}, alebo \emph{replikácia exportu}, tieto problémy nevymizli.
Pozostávajú z prispôsobovania niektorých parametrov meracích nástrojov zdrojom meracieho 
systému zatiaµ èo musia naplni» patrièné podmienky ako sú \emph{presnos» nameraných dát}, \emph{granularita 
toku}, èi \emph{spoµahlivos» exportu}. Tieto okolnosti závisia na dvoch faktoroch:
\begin{enumerate}
 \item \textbf{Kapacita  meracieho systému} - pozostáva zo ¹írky pásma  spravovanej siete, kapacity 
 úlo¾iska a výkonu exportovacích a zhroma¾ïovacích nástrojov
 
 \item \textbf{Po¾iadavky aplikácie} - rôzne aplikácie vy¾adujú rôznu zrnitos» záznamov o tokoch a presnos» dát.
\end{enumerate}


\subsection{Vybrané pr\'iklady pou\v{z}itia sprostredkovania spr\'av} \label{sec:mediator_examples}

RFC 5982 \citep{rfc5982} uvádza viacero príkladov zaradenia IPFIX Mediátora do klasickej
exportér - kolektor architektúry. Uveïme aspoò niektoré:
\begin{itemize}
  \item anonymizácia dátových záznamov,
  \item distribúcia dátových záznamov,
  \item konverzia z protokolu ni¾¹ej verzie na IPFIX,
  \item prispôsobovanie granularity tokov,
  \item distribuovaná zhroma¾ïovacia infra¹truktúra,
  \item spájanie èasu,
  \item spájanie priestoru,
\begin{itemize}
  \item spájanie priestoru v rámci jednej pozorovacej domény,
  \item spájanie priestoru viacerých pozorovacích domén jedného exportéra,
  \item spájanie priestoru niekoµkých exportérov,
  \item spájanie priestoru administratívnych domén.
\end{itemize}
\end{itemize}




\clearpage
\section{Popis programu}

Jednotlivé èasti programu sú umiestnené v~nasledujúcich balíkoch:

\begin{itemize}
\item \verb|sk.tuke.cnl.bm.Mediator.collecting| - implementácia zhroma¾ïovacieho procesu
\item \verb|sk.tuke.cnl.bm.Mediator.exporting| - implementácia exportovacieho procesu
\item \verb|sk.tuke.cnl.bm.Mediator.IntermediateProcesses| - triedy tvoriace podporu pre sprostredkovateµské 
procesy. Hlavné triedy nových modulov musia by» umiestnené v tomto balíku!
\item \verb|sk.tuke.cnl.bm.Mediator.IPFIX| - triedy s~manuálnou implementáciou protokolu IPFIX
\item \verb|sk.tuke.cnl.bm.Mediator.exceptions| - vlastné výnimky aplikácie
\item \verb|sk.tuke.cnl.bm.Mediator| - hlavné triedy samotného programu
\end{itemize}




\subsection{Architekt\'ura rie\v{s}enia} 

\begin{figure}[ht!]
\centering
\includegraphics[width=0.8\textwidth]{mediator_reference_model}
\caption{Referenèný model Mediátora}\label{o:mediator_reference_model}
\end{figure}

Analýze aplikaèného rámca pre sprostredkovanie správ v IPFIX a jej architektúre sa venuje RFC 
6183 \citep{rfc6183}. 
Na základe referenèného modelu sprostredkovania správ v IPFIX ako roz¹írenia referenèného modelu 
IPFIX, popísaného v Architecture for IP Flow Information Export \emph{Architecture for IP Flow Information Export}
bol navrhnutý referenèný model architektúry rie¹enia programu Mediator v1.0. Táto schéma zobrazuje mo¾né 
scenáre, ktoré mô¾u existova» v meracej architektúre. Funkèné komponenty v rámci ka¾dej entity sú 
ohranièené zátvorkami []. Mediátor mô¾e prijíma» záznamy o toku od iných mediátorov a exportérov 
transportným protokolom UDP. Spracované dáta vo forme záznamov o toku potom exportuje protokolom UDP 
jednému kolektoru alebo inému mediátoru, pozri Obrázok \ref{o:mediator_reference_model} 


\begin{figure}[ht!]
\centering
\includegraphics[width=0.8\textwidth]{mediator_component_model}
\caption{Zjednodu¹ený model komponentov IPFIX Mediátora}\label{o:mediator_component_model}
\end{figure}

Zjednodu¹ený model komponentov programu Mediator v1.0 predstavuje Obrázok \ref{o:mediator_component_model}. 
Mediátor mô¾e obsahova» jeden alebo viac sprostredkovateµských procesov, hierarchicky ulo¾ených 
medzi jedným exportovacím a zhroma¾ïovacím procesom.

Sprostredkovateµské procesy sú kµúèovými funkènými blokmi sprostredkovania správ v IPFIX. Rôzne procesy
pokrývajú ka¾dý príklad pou¾itia sprostredkovania správ z Kapitoly~\ref{sec:analyza} 
(Sekcia~\ref{sec:mediator_examples}). 
Mediator v1.0 je schopný súèasne podporova» viac ako jeden sprostredkovateµský proces a tok dát medzi 
nimi je riadený nasledujúcimi spôsobmi:
\begin{itemize}
 \item \textbf{Paralelné spracovanie} - Prúd záznamov je spracovaný viacerými sprostredkovateµskými procesmi 
 paralelne tak, aby boli splnené po¾iadavky koncových aplikácií. V tomto scenári, ka¾dý 
 sprostredkovateµský proces dostáva kópiu celého prúdu záznamov ako vstup.
 \item \textbf{Sériové spracovanie} - Aby bolo zabezpeèené flexibilné spracovanie prúdu záznamov, sprostredkovateµské
 procesy sú zapojene sériovo. V tomto prípade výstupný prúd záznamov jedného procesu je vstupným prúdom 
 nasledujúceho.
\end{itemize}



\subsection{Popis rie\v{s}enia}

\subsubsection{Hlavn\'a trieda Medi\'atora}

Úlohou hlavnej triedy Mediátora je postupne spusti» v¹etky svoje vlákna a procesy potrebné pre beh 
programu. Najprv sa preèítajú a spracujú argumenty príkazového riadku, ktoré mô¾u by»: cesta ku 
konfiguraènému súboru a zadaná mo¾nos» \verb|--logtofile|. Vtedy sú v¹etky 
logovacie výstupy presmerované zo ¹tandardného výstupu do súboru.

Potom ako program naèíta v¹etky nastavenia z konfiguraèného súboru, spustí svoje moduly -- 
sprostredkovateµské procesy pomocou triedy \verb|IPLoader|. Nasleduje spustenie vlákna, ktoré prijíma 
IPFIX pakety prostredníctvom protokolu UDP a vlákna, ktoré ich spracováva. Hovoríme o \verb|UDPServer| 
a \verb|UDPProcessor|. Nakoniec je spustené exportovacie vlákno - \verb|UDPExporter|. Kedykoµvek keï 
nastane chyba je Mediátor korektne ukonèený a to tak, ¾e uvoµní v¹etku pamä» a zastaví be¾iace vlákna. 
Rovnako je Mediátor zastavený po stlaèení kombinácie kláves \verb|Ctrl-c|.
Struène o ka¾dom spomenutom vlákne a procese bude povedané v nasledujúcich kapitolách. K podrobnej¹ím
informáciám sa èitateµ dostane v hlavnej èasti diplomovej práce.


\subsubsection{Zhroma\v{z}\v{d}ovac\'i proces} \label{sec:collectingprocess}

Logická ¹truktúra procesu sa skladá z dvoch fáz, prièom ka¾dú fázu predstavuje jedno vlákno. 
Venujme sa teda jednotlivým fázam procesu.



\paragraph{1. f\'aza zhroma\v{z}\v{d}ovacieho procesu}

\begin{figure}[ht!]
\centering
\includegraphics[width=0.8\textwidth]{collecting1_schema}
\caption{Schéma prvej fázy zhroma¾ïovacieho procesu Mediátora}\label{o:collecting1_schema}
\end{figure}

Prvá fáza je znázornená na Obrázku~\ref{o:collecting1_schema} a predstavuje najni¾¹iu vrstvu celého 
nástroja. Jej jadrom je UDP server, be¾iaci v samostatnom vlákne. V jeho hlavnej metóde \emph{run()}
cyklicky vykonáva kód, dokiaµ nie je preru¹ený výnimkou \emph{InterruptedException}.
Tento kód odchytáva údaje posielané protokolom UDP na úrovni bytov a ukladá ich do 
vyrovnávacej pamäte. Tieto údaje, spolu s IP adresou exportéra a èasom prijatia dát zabalí do objektu triedy
\verb|PacketObject|. Prijatá IPFIX správa sa v tejto forme ulo¾í do vyrovnávacej 
pamäte typu \emph{FIFO} front, ktorá oddeµuje prvú a druhú fázu zhroma¾ïovacieho procesu. 

Návrh do budúcnosti umo¾òuje jednoduché roz¹írenie o serveri iných protokolov, napr. TCP a SCTP. 
Tieto serveri budú rovnako ako \verb|UDPServer| be¾iace v samostatných vláknach.



\paragraph{2. f\'aza zhroma\v{z}\v{d}ovacieho procesu}

Schému druhej fázy mô¾eme vidie» na Obrázku~\ref{o:collecting2_schema}. Hlavná metóda \emph{run()} vlákna 
\verb|UDPProcessor| cyklicky vyberá dáta z \verb|PacketCache| a odovzdáva ich \emph{parseru} - \verb|IPFIXParser|. 
Pakety, ktoré nie sú IPFIX správami, ale aj po¹kodené dáta program zahadzuje a pokraèuje spracovávaním 
ïal¹ej správy.
Trieda \verb|IPFIXParser| spracuje prijaté binárne dáta do hotového objektu IPFIX správy, 
Metódy tejto triedy najprv vykladajú kompletnú hlavièku správy a potom sa pustia do parsovania IPFIX 
sád a ich záznamov. Program podporuje v¹etky 3 typy IPFIX sád, konkrétne sadu ¹ablón, sadu ¹ablón 
mo¾ností a dátovú sadu. 

Prichádzajúce záznamy ¹ablón a záznamy ¹ablón mo¾nosti sú spravované triedou \verb|IPFIXUdpTemplateCache|.
Objekty nových ¹ablón ukladá, ¹ablóny ktoré pozná aktualizuje. Zároveò ma¾e staré ¹ablóny, ku ktorým 
nedostala aktualizáciu po dobu definovanú v konfiguraènom súbore.

Napokon sa ka¾dý dátový záznam v dátovej sade, s prislúchajúcou ¹ablónou a hlavièkou IPFIX správy 
zabalí do objektu triedy \verb|IPFIXFlowRecord|, ktorá je reprezentáciou záznamu o toku. 
Tento záznam spolu s re»azcom, ktorý urèuje odkiaµ záznam vystupuje \emph{(inputProcess)} sú posielané
ako parametre triede \verb|FlowRecordDispatcher|. Dispeèer záznamov o tokoch rozdistribuuje prijaté 
záznamy príslu¹ným sprostredkovateµským procesom, alebo ich po¹le na export. 


\begin{figure}[ht!]
\centering
\includegraphics[width=0.8\textwidth]{collecting2_schema}
\caption{Schéma druhej fázy zhroma¾ïovacieho procesu Mediátora}\label{o:collecting2_schema}
\end{figure}





\subsection{Rozhranie a podpora pre sprostredkovate\v{l}sk\'e moduly} \label{sec:intermediate_process}


\subsubsection{Abstraktn\'a trieda AIntermediateProcess} 

Tato trieda je akýmsi rozhraním pre sprostredkovateµské procesy, ktoré oddeµuje ich logiku od logiky 
aplikaèného rámca. Navy¹e definuje základné vlastnosti, ktoré sú rovnaké pre v¹etky procesy a 
implementuje metódy, ktoré majú by» procesom dostupné.

Trieda zabezpeèuje nasledujúce vlastnosti a metódy:
\begin{itemize}
 \item \textbf{Viacvláknovos»} - Ka¾dý modul musí by» vykonávaný v samostatnom vlákne. Preto dedí
od triedy \verb|Thread| a obsahuje abstraktnú metódu \emph{run()}, èo je vlastne deklaráciou 
hlavnej metódy vlákien.

 \item \textbf{Jediná in¹tancia modulov} - Zabezpeèuje, ¾e moduly sú implementované podµa návrhového 
 vzoru Singleton. Rie¹enie je hybridom viacerých prístupov, ktoré sa diskutujú na Internete, no vychádza 
 z návrhového vzoru \emph{Factory method}. Výsledkom je abstraktná trieda, slú¾iaca ako továreò na 
podtriedy tým, ¾e volá jej statická metóda \emph{getInstance(Class clazz)}. Získané in¹tancie sprostredkovateµských
modulov uchováva v hash mape. 

 \item \textbf{Dekódovanie dátových záznamov} - Na základe dátového typu je urèená metóda, ktorá dekóduje 
hodnoty informaèných elementov. Dekódovanie je implementované v súlade s RFC 5101 \citep{rfc5101} a 
RFC 5102 \citep{rfc5102} pre v¹etky dátové typy podporované protokolom IPFIX. Dekódované hodnoty sa 
ukladajú do hash mapy, ktorá kvôli jednoduchému vyhµadávaniu prvkov asociuje názov informaèného elementu 
na jeho hodnotu. 
 
 \item \textbf{Zakódovanie dátových záznamov} - Návrh a implementácia bola analogická k dekóderu. 
Aj tu sú pokryté v¹etky dátové typy, ktoré podporuje IPFIX protokol. Podla ¹pecifikácie
\citep{rfc5101} musia by» zakódované informaèné elementy posielané v sie»ovom poradí bytov, známom 
tie¾ ako \emph{Big-Endian}. Pri kódovaní je veµmi dôle¾itá rýchlos» a pamä»ová 
nenároènos» kódovacích funkcií. Preto bol kladený veµký dôraz na to, aby boli 
kódovacie funkcie èo najoptimálnej¹ie. Preto boli pre v¹etky konverzie implementované metódy pomocou bitových
posunov a bitových operátorov.
\end{itemize}


\subsubsection{Pr\'iklad implement\'acie modulu - ExampleProcess}

Pre budúcich rie¹iteµov bol pripravený jednoduchý príklad implementácie sprostredkovateµského procesu.
Predstavuje ho trieda \verb|ExampleProcess|, ktorej úlohou je veµmi jednoduchá anonymizácia zdrojovej a 
cieµovej IP adresy zmenením èísla posledného oktetu na nulu. 

Trieda demon¹truje v¹etky pravidlá programovania sprostredkovateµských procesov a zároveò predvádza 
pou¾itie metód, ktoré programátorom poskytuje jej rodièovská trieda \verb|AIntermediateProcess|.
Prechádza v¹etky dátové záznamy vstupného záznamu o tokoch, dekóduje ich, anonymizuje zdrojovú a cieµovú 
IP adresu a naspa» zakóduje. Ak v¹etko prebehlo bez problémov, tak výstupný záznam o toku 
posunie distribútorovi záznamov, ktorý ho bude prepo¹le 
nasledujúcemu sprostredkovateµskému procesu, alebo pripraví na export.


\subsubsection{Dynamick\'e na\v{c}\'itavanie sprostredkovate\v{l}sk\'ych procesov} \label{sec:intermediate_load}


Naèítavanie modulov má na starosti trieda \verb|IPLoader|. Jej hlavná metóda
\emph{loadProcesses()} na základe \emph{class} objektu ka¾dého z modulov získa jeho jedineènú in¹tanciu 
Keï¾e ka¾dý proces je samostatným vláknom, teda dedí od triedy \verb|Thread|, u¾ ho len ostáva spusti» 
pomocou metódy \emph{start()}. Toto zabezpeèí reflexia, ktorá získa metódu a následne ju vyvolá 
\emph{(invoke)}.


\subsubsection{Trieda FlowRecordDispatcher} \label{sec:FlowRecordDispatcher}

Úlohou tejto triedy je riadi» tok dát medzi komponentami IPFIX Mediátora na základe nastavenia v 
konfiguraènom súbore.

Práca triedy \verb|FlowRecordDispatcher| zaèína keï prijme prvé dáta od zhroma¾ïovacieho procesu. Dáta 
prijíma cez dva parametre: záznam o toku - \verb|IPFIXFlowRecord| a re»azec urèujúci odkiaµ tento záznam 
vystupuje - \emph{inputProcess}. Na jeho základe získa zoznam prijímateµov tohto záznamu o toku z konfiguraèného
súboru. Metódou \emph{getInstance(String processName)} zavolanou nad
abstraktnou triedou \emph{AIntermediateProcess} získa jedinú in¹tanciu sprostredkovateµského procesu. 
Ka¾dej takto získanej in¹tancii sprostredkovateµského procesu zapí¹e do vstupnéj pamäte 
\emph{inputBuffer} záznam o toku.

\begin{figure}[ht!]
\centering
\includegraphics[width=0.9\textwidth]{flowRecordDispatcher_schema}
\caption{Schéma toku dát cez triedu FlowRecordDispatcher}\label{o:flowRecordDispatcher_schema}
\end{figure}

Ak metóda na získanie zoznamu prijímateµov vráti prázdny zoznam, vyplýva, ¾e záznam o toku 
sa nemá presmerova» ïal¹iemu sprostredkovateµskému procesu, ale je u¾ urèený na export. Preto záznam o 
toku je zapísaný do vyrovnávacej pamäte pre export. Výsledkom je, ¾e dáta boli presmerované správnym 
prijímateµom a boli splnené príslu¹né po¾iadavky na rámec pre IPFIX Mediátor.

\subsection{Exportovac\'i proces}

Poslednou fázou Mediátora je exportovací proces. Jeho schéma je zobrazená na Obrázku 
\ref{o:exporting_schema}. 

\begin{figure}[ht!]
\centering
\includegraphics[width=0.8\textwidth]{exporting_schema}
\caption{Schéma exportovacieho procesu}\label{o:exporting_schema}
\end{figure}

Jadrom exportovacieho procesu je trieda \verb|UDPExporter|, predstavujúca samostatné vlákno. V 
kon¹truktori vytvára UDP socket na prijímanie a posielanie paketov a navia¾e ho na akýkoµvek voµný port.
K tomu slú¾i volanie bezparametrického kon¹truktora triedy \verb|DatagramSocket|. V jeho hlavnej metóde 
\emph{run()} vykonáva cyklus dokiaµ nie je preru¹ený. V cykle èíta a vyberá záznamy o tokoch z 
vyrovnávacej pamäte pre export. Záznamy posiela triede \verb|MessageEncoder|, ktorá z neho poskladá 
IPFIX paket. 

\verb|MessageEncoder| vo svojich metódach postupne tvori obsah IPFIX správy podµa formátu definovaného 
pracovnou skupinou IPFIX zo záznamu o tokoch. Na prvom mieste je prúd bytov hlavièky správy. Ak sa 
exportuje aj ¹ablóna, tak nasleduje prúd sady ¹ablóny 
a posledným je prúd dátovej sady. 

Trieda \verb|UDPExporter| teraz z prúdu IPFIX správy vytvori 
UDP paket. Na to slú¾i trieda \verb|DatagramPacket|, prièom jej parametrami sú dáta, då¾ka správy, 
IP adresa a UDP port. Posledné dve menované sú zadané administrátorom v konfiguraènom súbore. Metódou 
\emph{send()} zavolanou nad socketom je správa odoslaná.




\clearpage
\section{Popis tried, \v{c}lensk\'ych premenn\'ych a~met\'od}

Keï¾e niektoré triedy Mediátora sú kvôli jednotnosti rie¹ení v rámci výskumnej skupiny MONICA toto¾né 
s triedami nástroja JXColl, v~nasledujúcich èastiach budú uvedené len tie, ktoré sa týkajú výhradne 
Mediátora. Popis ostatných tried a~metód je uvedený v~systémovej príruèke programu 
JXColl \citep{jxcoll_sp}.  

% ----------HLAVNÝ BALÍK --------------------------------------

\subsection{Bal\'ik sk.tuke.cnl.bm.Mediator}

\subsubsection{Trieda Default}
Trieda predstavuje rozhranie obsahujúce východiskové hodnoty konfiguraèného súboru. Neobsahuje kon¹truktor
ani ¾iadne metódy, iba verejne prístupné statické kon¹tanty.



\subsubsection{Trieda DropsCounter}
Slú¾i na výpoèet ¹tatistiky zahodených entít. Pod entitou sa myslia záznamy o tokoch, dátové záznamy, 
alebo IPFIX pakety. Obsahuje len statické metódy.

\bigskip
\textbf{Metódy} 

\textit{public static void \textbf{inputBufferDropsUP}()}

Zvy¹uje poèet strát spôsobených preplnením vstupnej pamäte sprostredkovateµských procesov o jeden. \\
\textbf{Parametre:} \\
\emph{String} processName - meno procesu


\textit{public static void \textbf{exportCacheDropsUP}()}

Zvy¹uje poèet strát spôsobených \verb|ExportCache| o jeden.\\


\textit{public static void \textbf{encodingDropsUp}()}

Zvy¹uje poèet strát spôsobených chybou pri kódovaní o jeden.\\


\textit{public static void \textbf{decodingDropsUp}()}

Zvy¹uje poèet strát spôsobených chybou pri dekódovaní o jeden.\\


\textit{public static void \textbf{packetDropsUp}()}

Zvy¹uje poèet IPFIX paketov zahodených UDP serverom o jeden.\\


\textit{public static void \textbf{printStats}()}

Vypí¹e ¹tatistiku v¹etkých zahodených entít.



\subsubsection{Trieda FlowRecordDispatcher}
Úlohou tejto triedy je na základe konfiguraèného súboru distribuova» prijaté záznamy o toku 
sprostredkovateµským procesom (sériovo alebo paralelne) a exportovaciemu procesu. Distribúcia prebieha
v súlade s IPFIX Mediator Framework (RFC~6183) \citep{rfc6183}. Táto trieda je implementovaná podµa návrhového vzoru 
\emph{Singleton}.

\bigskip
\textbf{Metódy} 

\textit{public static FlowRecordDispatcher \textbf{getInstance}()}

Implementuje vzor \emph{Singleton}. Vytvorí a vráti jedineènú in¹tanciu v prípade ¾e neexistuje, v 
opaènom prípade ju iba vráti. \\
\textbf{Návratová hodnota:} \\
Jedineèný objekt typu \verb|FlowRecordDispatcher|.\\


\textit{public synchronized void \textbf{dispatchFlowRecord}(IPFIXFlowRecord flowRecord, String inputProcess)}

Posiela prijaté záznamy o tokoch príslu¹ným sprostredkovateµským procesom, alebo exportovaciemu procesu 
podµa konfigurácie. Najprv získa zoznam prijímateµov toku na základe mena pôvodcu. Ak je zoznam prázdny - 
záznam o toku je 
urèený na export, preto ho zapí¹e do \verb|ExportCache|. Ak zoznam nie je prázdny, získa si in¹tancie 
prijímateµov toku a záznam im zapí¹e do vstupného buffera. Táto metóda je synchronizovaná, lebo je
prístupná viacerým vláknam. \\
\textbf{Parametre:} \\
\emph{IPFIXFlowRecord} flowRecord - záznam o toku, ktorý sa má distribuova» ïalej \\
\emph{String} inputProcess - meno pôvodcu záznamu o toku.\\

\textit{private void \textbf{fillInputBuffer}(AIntermediateProcess process, IPFIXFlowRecord flowRecord)}

Metóda, ktorá zapisuje záznamy o tokoch do vstupného buffera sprostredkovateµských procesov. V prípade
neúspechu sa zvý¹i poèítadlo v \verb|DropsCounter| a vypí¹e error. \\
\textbf{Parametre:} \\
\emph{AIntermediateProcess} process - in¹tancia sprostredkovateµského procesu. \\
\emph{IPFIXFlowRecord} flowRecord - záznam o toku, ktorý sa má zapísa».\\

\textit{private ArrayList$<$String$>$ \textbf{getReceiversList}(String inputDevice)}

Získava zoznam príjemcov záznamu o toku od zadaného pôvodcu toku. \\
\textbf{Parametre:} \\
\emph{String} inputDevice - pôvodca záznamu o toku \\
\textbf{Návratová hodnota:} \\
Zoznam príjemcov toku, typ \verb|ArrayList|.



\subsubsection{Trieda IPLoader}
Trieda je zodpovedná za dynamické naèítavanie sprostredkovateµských procesov definovaných v konfiguraènom
súbore. Implementuje návrhový vzor \emph{Singleton}.

\bigskip
\textbf{Metódy} 

\textit{public static IPLoader \textbf{getInstance}()}

Implementuje vzor \emph{Singleton}. Vytvorí a vráti jedineènú in¹tanciu v prípade ¾e neexistuje, v opaènom prípade 
ju iba vráti.\\


\textit{public void \textbf{loadProcesses}()}

Hlavná metóda triedy, dynamicky naèítava sprostredkovateµské moduly definované v konfiguraènom súbore. 
Najprv získa systémový \emph{classLoader}. V cykle prechádza zoznam sprostredkovateµských modulov. 
Ka¾dý re»azec obsahujúci meno prevedie na binárne meno (meno triedy vrátane balíèkov)  a pomocou 
classLoader-a získa jeho \verb|Class| objekt. Na základe tohto objektu získa jedineènú in¹tanciu 
modulu a keï¾e sa jedná o vlákno, spustí ho tak, ¾e zavolá jeho metódu \verb|start()|. \\
\textbf{Hád¾e:} \\
\verb|IPLoaderException| - V prípade akejkoµvek chyby, ktorá mô¾e nasta» pri vykonávaní metódy. Chyby, ktoré 
sú zachytávané sú typov:
\begin{itemize}
 \item \verb|SecurityException|,
 \item \verb|ClassNotFoundException|,
 \item \verb|IllegalAccessException|,
 \item \verb|NoSuchMethodException|,
 \item \verb|InvocationTargetException|.
\end{itemize}



\subsubsection{Trieda Mediator}
Úlohou hlavnej triedy Mediátora je postupne spusti» v¹etky vlákna a procesy potrebné pre beh programu.
Najprv sa preèítajú a spracujú argumenty príkazového riadku. Program vie rozpoznáva» dva druhy 
argumentov. Prvým je cesta ku konfiguraènému súboru. Ak nie je zadaná, pou¾íva sa východiskový 
konfiguraèný súbor. Druhým argumentom mô¾e by» zadaná mo¾nos» \verb|--logtofile|. Vtedy sú v¹etky 
logovacie výstupy presmerované zo ¹tandardného výstupu do súboru.

Potom ako program naèíta v¹etky nastavenia z konfiguraèného súboru, spustí v¹etky svoje moduly - 
sprostredkovateµské procesy pomocou triedy \verb|IPLoader|. Nasleduje spustenie vlákna, ktoré prijíma 
IPFIX pakety prostredníctvom protokolu UDP a vlákna, ktoré ich spracováva. Hovoríme o \verb|UDPServer| 
a \verb|UDPProcessor|. Nakoniec je spustené exportovacie vlákno - \verb|UDPExporter|. Kedykoµvek keï 
nastane chyba je Mediátor korektne ukonèený a to tak, ¾e uvolní v¹etku pamä» a zastaví be¾iace vlákna. 
Rovnako je Mediátor zastavený po stlaèení kombinácie kláves \verb|Ctrl-c|.

\bigskip
\textbf{Metódy} 

\textit{public static void \textbf{main}(String[] args)}

Hlavná metóda triedy. \\
\textbf{Parametre:} \\
\emph{String[]} args - argumenty príkazového riadku.\\


\emph{public static void \textbf{stopMediator}()}

Metóda, ktorá korektne ukonèuje beh programu. Zastaví v¹etky spustené vlákna a uvoµní v¹etky druhy pamäte.\\

\clearpage
\emph{public static void \textbf{interruptThread}()}

Preru¹í vykonávanie vlákna. \\
\textbf{Parametre:} \\
\emph{Thread} thread - objekt vlákna, ktoré sa má zastavi».\\


\emph{private static void \textbf{loggingToFile}()}

Metóda, ktorá vykonáva logovanie do súboru namiesto ¹tandardného výstupu.



\subsubsection{Trieda Support}
Podporná trieda, ktorá obsahuje pomocné metódy potrebné pri de(kódovaní) a pri validácii formátu dát. 
Uvádzam iba vlastné metódy.

\bigskip
\textbf{Metódy} 


\emph{public static byte[] \textbf{byteToByteArray}(byte x)}

Konvertuje primitívny typ \emph{byte} na pole bytov v usporiadaní bytov Big-Endian. \\
\textbf{Parametre:} \\
\emph{byte} x - hodnota, ktorá sa má zakódova». \\
\textbf{Návratová hodnota:} \\
Pole bytov, typ \emph{byte[]}. \\


\emph{public static byte[] \textbf{shortToByteArray}(short x)}

Konvertuje primitívny typ \emph{short} na pole bytov v usporiadaní bytov Big-Endian. \\
\textbf{Parametre:} \\
\emph{short} x - hodnota, ktorá sa má zakódova». \\
\textbf{Návratová hodnota:} \\
Pole bytov, typ \emph{byte[]}. \\


\emph{public static byte[] \textbf{intToByteArray}(int x)}

Konvertuje primitívny typ \emph{int} na pole bytov v usporiadaní bytov Big-Endian. \\
\textbf{Parametre:} \\
\emph{int} x - hodnota, ktorá sa má zakódova». \\
\textbf{Návratová hodnota:} \\
Pole bytov, typ \emph{byte[]}. \\


\emph{public static byte[] \textbf{longToByteArray}(long x)}

Konvertuje primitívny typ \emph{long} na pole bytov v usporiadaní bytov Big-Endian. \\
\textbf{Parametre:} \\
\emph{long} x - hodnota, ktorá sa má zakódova». \\
\textbf{Návratová hodnota:} \\
Pole bytov, typ \emph{byte[]}. \\


\emph{public static byte[] \textbf{floatToByteArray}(float x)}

Konvertuje primitívny typ \emph{float} na pole bytov v usporiadaní bytov Big-Endian. \\
\textbf{Parametre:} \\
\emph{float} x - hodnota, ktorá sa má zakódova». \\
\textbf{Návratová hodnota:} \\
Pole bytov, typ \emph{byte[]}. \\


\emph{public static byte[] \textbf{doubleToByteArray}(double x)}

Konvertuje primitívny typ \emph{double} na pole bytov v usporiadaní bytov Big-Endian. \\
\textbf{Parametre:} \\
\emph{double} x - hodnota, ktorá sa má zakódova». \\
\textbf{Návratová hodnota:} \\
Pole bytov, typ \emph{byte[]}. \\


\emph{public static boolean \textbf{validateMAC}(String macAddress)}

Validuje formát MAC adresy. \\
\textbf{Parametre:} \\
\emph{String} macAddress - adresa, ktorej formát sa má overi». \\
\textbf{Návratová hodnota:} \\
\emph{true} - v prípade, ¾e je adresa v správnom formáte.\\
\emph{false} - opaène.





% ----------BALÍK IPFIX --------------------------------------

\subsection{Bal\'ik sk.tuke.cnl.bm.Mediator.IPFIX}

\subsubsection{Trieda IPFIXEncoder}
Trieda so statickými metódami slú¾iacimi na zakódovanie re»azcovej reprezentácie hodnôt informaèných
elementov na abstraktne dátové typy podµa RFC 5101 \citep{rfc5101} a~RFC 5102 \citep{rfc5102}. 
Je presným opakom triedy \verb|IPFIXDecoder|.


\bigskip
{\bfseries Metódy}


\textit{public static byte[] \textbf{encode}(String dataType, String value)}

Zakóduje hodnotu dátového typu do poµa bytov podµa ¹pecifikácie IPFIX.
Priamo nevykonáva zakódovanie, volá konkrétne metódy podµa kategórie dátového typu.\\
{\bfseries Parametre:}\\
\emph{String} dataType - re»azec definujúci dátový typ obsiahnutý v~bufferi.\\
\emph{String} value - samotné dáta, ktoré sú predmetom zakódovania\\
{\bfseries Návratová hodnota:} \\
Pole bytov reprezentujúce interpretovanú re»azcovú hodnotu na základe odovzdaného typu. \\
{\bfseries Hád¾e:} \\
\verb|UnsupportedDataException| - Ak dátový typ nie je podporovaný\\
\verb|OutOfBoundsException| - Ak je hodnota mimo povoleného rozsahu\\
\verb|UnknownHostException| - Ak program nevie rozpozna» host, alebo IP adresu \\
\verb|DataException| - Ak je chyba v formáte kódovanej hodnoty vzhµadom na dátový typ\\



\textit{public static byte[] \textbf{encodeUnsignedIntegralType}(String dataType, String value)}

Zakóduje celoèíselné bezznamiekové dátové typy unsigned8, unsigned16, unsigned32, unsigned64 a unsigned128. \\
{\bfseries Parametre:}\\
\emph{String} dataType - re»azec definujúci dátový typ obsiahnutý v~bufferi.\\
\emph{String} value - samotné dáta, ktoré sú predmetom zakódovania\\
{\bfseries Návratová hodnota:} \\
Pole bytov reprezentujúce interpretovanú re»azcovú hodnotu na základe odovzdaného typu. \\
{\bfseries Hád¾e:} \\
\verb|UnsupportedDataException| - Ak dátový typ nie je podporovaný\\
\verb|NumberFormatException| - Ak je chyba v formáte kódovanej hodnoty vzhµadom na dátový typ\\
\verb|OutOfBoundsException| - Ak je hodnota mimo povoleného rozsahu\\



\textit{public static byte[] \textbf{encodeSignedIntegralType}(String dataType, String value)}

Zakóduje celoèíselné znamienkové dátové typy signed8, signed16, signed32 a signed64. \\
{\bfseries Parametre:}\\
\emph{String} dataType - re»azec definujúci dátový typ obsiahnutý v~bufferi.\\
\emph{String} value - samotné dáta, ktoré sú predmetom zakódovania\\
{\bfseries Návratová hodnota:} \\
Pole bytov reprezentujúce interpretovanú re»azcovú hodnotu na základe odovzdaného typu. \\
{\bfseries Hád¾e:} \\
\verb|UnsupportedDataException| - Ak dátový typ nie je podporovaný\\
\verb|NumberFormatException| - Ak je chyba v formáte kódovanej hodnoty vzhµadom na dátový typ\\




\textit{public static byte[] \textbf{encodeFloatType}(String dataType, String value)}

Zakóduje desatinné dátové typy float32 a float64. \\
{\bfseries Parametre:}\\
\emph{String} dataType - re»azec definujúci dátový typ obsiahnutý v~bufferi.\\
\emph{String} value - samotné dáta, ktoré sú predmetom zakódovania\\
{\bfseries Návratová hodnota:} \\
Pole bytov reprezentujúce interpretovanú re»azcovú hodnotu na základe odovzdaného typu. \\
{\bfseries Hád¾e:} \\
\verb|UnsupportedDataException| - Ak dátový typ nie je podporovaný\\
\verb|NumberFormatException| - Ak je chyba v formáte kódovanej hodnoty vzhµadom na dátový typ\\




\textit{public static byte[] \textbf{encodeAddressType}(String dataType, String value)}

Zakóduje dátové typy obsahujúce adresy: ipv4Address, ipv6Address a macAddress. \\
{\bfseries Parametre:}\\
\emph{String} dataType - re»azec definujúci dátový typ obsiahnutý v~bufferi.\\
\emph{String} value - samotné dáta, ktoré sú predmetom zakódovania\\
{\bfseries Návratová hodnota:} \\
Pole bytov reprezentujúce interpretovanú re»azcovú hodnotu na základe odovzdaného typu. \\
{\bfseries Hád¾e:}\\
\verb|UnsupportedDataException| - Ak dátový typ nie je podporovaný\\
\verb|UnknownHostException| - Ak program nevie rozpozna» host, alebo IP adresu \\
\verb|DataException| - Ak je chyba v formáte kódovanej hodnoty vzhµadom na dátový typ\\




\textit{public static byte[] \textbf{encodeBooleanType}(String value)}

Zakóduje boolean reprezentujúci pravdivostnú hodnotu.\\
{\bfseries Návratová hodnota:}\\
Pole bytov reprezentujúci pravdivostnú hodnotu, "true" alebo "false". \\
{\bfseries Hád¾e:} \\
\verb|OutOfBoundsException| - Ak je hodnota mimo povoleného rozsahu\\



\textit{public static byte[] \textbf{encodeStringType}(String value)}

Zakóduje re»azec v kódovaní UTF-8 do pole bytov.\\
{\bfseries Návratová hodnota:}\\
Pole bytov re»azca v~kódovaní UTF-8.\\



\textit{public static byte[] \textbf{encodeOctetArrayType}(String value)}

Re»azec v kódu Base64 prevedie na pole bytov.\\
{\bfseries Návratová hodnota:}\\
Pole bytov predstavujúce binárne dáta zakódované v~Base64. \\



\textit{public static byte[] \textbf{encodeDateTimeType}(String dataType, String value)}

Zakóduje dátové typy èasových známok: dateTimeSeconds, dateTimeMilliseconds, dateTimeMicroseconds a 
dateTimeNanoseconds do poµa bytov. \\
{\bfseries Parametre:}\\
\emph{String} dataType - re»azec definujúci dátový typ obsiahnutý v~bufferi.\\
\emph{String} value - samotné dáta, ktoré sú predmetom zakódovania\\
{\bfseries Návratová hodnota:}\\
Pole bytov reprezentujúce interpretovanú hodnotu re»azca na základe odovzdaného typu.
Dátové typy dateTimeSeconds a dateTimeMilliseconds predstavujú poèet sekúnd, resp. milisekúnd od Unix 
epochy (00:00 1.1.1970 UTC).
Dátové typy dateTimeMicroseconds a dateTimeNanoseconds sú zakódované vo formáte èasovej známky NTP 
Timestamp.\\
{\bfseries Hád¾e:}\\
\verb|UnsupportedDataException| - Ak dátový typ nie je podporovaný\\
\verb|NumberFormatException| - Ak je chyba v formáte kódovanej hodnoty vzhµadom na dátový typ\\
\verb|OutOfBoundsException| - Ak je hodnota mimo povoleného rozsahu\\



\textit{public static void \textbf{checkStringNumbersRange}(String min, String max, String value, String dataType)}

Overí, èi èíselná hodnota v re»azci spadá do rozsahu daného dátovým typom. \\
{\bfseries Parametre:}\\
\emph{String} min - dolná hranica rozsahu \\
\emph{String} max - horná hranica rozsahu\\
\emph{String} value - hodnota, ktorá sa má overi»\\
\emph{String} dataType - dátový typ hodnoty\\
{\bfseries Hád¾e:}\\
\verb|OutOfBoundsException| - Ak je hodnota mimo povoleného rozsahu




\subsubsection{Trieda IPFIXFlowRecord}
Táto trieda je reprezentáciou IPFIX Flow record-u, teda záznamu o toku.

\bigskip
\textbf{Kon¹truktor} 

\textit{public \textbf{IPFIXFlowRecord}(IPFIXTemplateRecord referencedTemplate, 
ArrayList $<$IPFIXDataRecord$>$ dataRecords, IPFIXMessage.IPFIXMessageHeader messageHeader)}

Kon¹truktor prostredníctvom odovzdaných parametrov inicializuje èlenské premenné.\\
\textbf{Parametre:}\\
\emph{IPFIXTemplateRecord} referencedTemplate - ¹ablóna patriaca dátovým záznamom\\
\emph{ArrayList$<$IPFIXDataRecord$>$} dataRecords - pole dátových záznamov\\
\emph{IPFIXMessage.IPFIXMessageHeader} messageHeader - hlavièka IPFIX správy, ktorá obsahovala tento
záznam o toku


\emph{public \textbf{IPFIXFlowRecord}()}

Bezparametrický kon¹truktor. Iba inicializuje prázdne pole dátových záznamov. \\


\textbf{Metódy:}\\
Metódy, ktoré tu nie sú spomenuté, sú klasické gettery a settery.



\emph{public int \textbf{getReferencedTemplateID}()}

{\bfseries Návratová hodnota:}\\
Vracia ID ¹ablóny z IPFIX správy, ktorá obsahovala tento záznam o toku.\\



\clearpage
\emph{public void \textbf{addDataRecord}(IPFIXDataRecord dataRecord)}

Pridá dátový záznam do poµa dátových záznamom flow record-u.\\
\textbf{Parametre:}\\
\emph{IPFIXDataRecord} dataRecord - dátový záznam, ktorý sa priradí záznamu o toku.



\subsubsection{Trieda IPFIXMessageHeader}
Trieda reprezentujúca hlavièku IPFIX správy. Implementuje návrhový vzor Singleton.

\bigskip
\textbf{Metódy:}\\
Metódy, ktoré tu nie sú spomenuté, sú klasické gettery a settery.

\emph{public static IPFIXMessageHeader \textbf{getInstance}()}

{\bfseries Návratová hodnota:}\\
Vracia jedineènú in¹tanciu objektu.





% ----------BALÍK INTERMEDIATE PROCESS ----------------------------------

\subsection{Bal\'ik sk.tuke.cnl.bm.Mediator.IntermediateProcesses}


Diagram tried rozhrania pre sprostredkovateµské procesy, vrátane triedy \verb|ExampleProcess| je znázornený
na Obrázku \ref{o:intermediate_class}.

\begin{figure}[ht!]
\centering
\includegraphics[width=1.0\textwidth]{intermediate_class}
\caption{Diagram tried rozhrania pre sprostredkovateµské procesy}\label{o:intermediate_class}
\end{figure}



\subsubsection{Trieda AIntermediateProcess}
Abstraktná trieda, poskytuje východiskové metódy sprostredkovateµským procesom a tvori akési
rozhranie medzi modulmi a aplikaèným rámcom. Dedí od triedy \verb|Thread|.\\
\\
\\

\bigskip
\textbf{Kon¹truktor} 

\emph{\textbf{AIntermediateProcess}(String childName)}

Nastaví meno procesu, podµa prijatého parametra. Inicializuje vstupnú vyrovnávaciu pamä» a získa jedineènú in¹tanciu
triedy \verb|IPFIXElements|.\\
\textbf{Parametre:}\\
\emph{String} childName - meno triedy potomka

\emph{\textbf{AIntermediateProcess}()}

Bezparametrický kon¹truktor. Inicializuje vstupnú vyrovnávaciu pamä» a získa jedineènú in¹tanciu
triedy \verb|IPFIXElements|.\\


\textbf{Metódy:}\\

\emph{public static final synchronized $<$T extends AIntermediateProcess$>$ T \textbf{getInstance} (Class clazz)}

Toto rie¹enie je hybridom viacerých prístupov, ktoré sa diskutujú na Internete, no vychádza z 
návrhového vzoru \emph{Factory method}. Výsledkom je abstraktná trieda, slú¾iaca ako továreò na 
podtriedy tým, ¾e volá jej statická metóda \emph{getInstance(Class clazz)}. 
Ak sú splnené podmienky, ¾e konkrétna trieda, napr. \verb|SelectionProcess| je definovaná v rovnakom 
balíèku ako \verb|AIntermediateProcess| a ich kon¹truktory nemajú explicitne nastavený prístup 
(predvoleným prístupom je \uv{privátny v rámci balíèka}), tak 
jediným spôsobom ako získa» in¹tanciu podtriedy mimo balíèka je cez kon¹trukciu:
\begin{verbatim}
 SelectionProcess instance = 
 AIntermediateProcess.getInstance(SelectionProcess.class);
\end{verbatim}
Dalo by sa vyèíta», ¾e vytváranie in¹tancií pou¾íva reflexiu, ktorá je pomalá. Av¹ak, keï¾e vytvárame 
Singleton-y, volanie \emph{newInstance()} sa vykoná pre ka¾dý modul práve raz. \\
\textbf{Parametre:}\\
\emph{Class} clazz = class objekt po¾adovanej triedy \\
\textbf{Návratová hodnota:}\\
Objekt typu T, prièom T dedi od \verb|AIntermediateProcess|.



\emph{public static final synchronized $<$T extends AIntermediateProcess$>$ T \textbf{getInstance} (String processName)}
   
Aby bolo mo¾né získava» in¹tancie modulov aj na základe mena triedy a nie len cez \emph{class} objekty,
bola vytvorená táto metóda. Premennú \emph{processName} prevedie na binárne meno procesu, podµa ¹pecifikácie jazyka 
Java, teda názov triedy vrátane balíèkov, napr. 
\verb|sk.tuke.cnl.Mediator.SelectionProcess|.
Táto metóda naèíta \emph{class} objekt sprostredkovateµského procesu cez systémový class loader,
tak ako to bolo vy¹¹ie spomínané. Potom zavolá pôvodnú metódu \emph{getInstance(Class clazz)} a 
vráti in¹tanciu procesu.\\
\textbf{Parametre:}\\
\emph{String} processName = meno po¾adovanej triedy \\
\textbf{Návratová hodnota:}\\
Objekt typu T, prièom T dedi od \verb|AIntermediateProcess|.\\




\emph{protected final HashMap \textbf{decodeDataRecord}(IPFIXTemplateRecord template, IPFIXDataRecord dataRecord)}

Pri prvom prechode funkciou sa generuje pamä»ový záznam o informaèných elementoch (ie) z XML súboru. 
Vytiahnu sa informácie o ie, ktoré sa nachádzajú v ¹ablóne, dekódujú sa ich dátové typy a príslu¹nos» k 
skupine.\\
\textbf{Parametre:}\\
\emph{IPFIXTemplateRecord} template - ¹ablóna dát\\
\emph{IPFIXDataRecord} dataRecord - dátový záznam\\
\textbf{Návratová hodnota:}\\
Dekódované dáta ako objekt typu \verb|HashMap|.\\


\emph{protected final IPFIXDataRecord \textbf{encodeDataRecord}(IPFIXTemplateRecord template, 
HashMap$<$String, String$>$ dataMap)}

Zakóduje v¹etky hodnoty z hashmapy obsahujúcej hodnoty informaèných elementov podµa ¹ablóny do dátového 
záznamu. \\
\textbf{Parametre:}\\
\emph{IPFIXTemplateRecord} template - ¹ablóna dát \\
\emph{HashMap$<$String, String$>$} dataMap - hodnoty informaèných elementov v hashmape, ktorá sa má zakódova»\\
\textbf{Návratová hodnota:}\\
Vracia objekt dátového záznamu -  \verb|IPFIXDataRecord|.\\
\textbf{Hád¾e:}\\
\verb|EncodingException| - Ak nastane chyba pri kódovaní.\\



\emph{protected final void \textbf{dispatchFlowRecord}(IPFIXFlowRecord flowRecord, String inputProcess)}

Vytvára rozhranie pre prístup k metóde aplikaèného rámca.\\
\textbf{Parametre:}\\
\emph{IPFIXFlowRecord} flowRecord - záznam o toku, ktorý sa má posunú» ïalej \\
\emph{String} inputProcess - pôvodca záznamu o toku 



\subsubsection{Trieda ExampleProcess}

Táto trieda je vzorovým rie¹ením jednoduchého sprostredkovateµského procesu, vykonávajúceho 
anonymizáciu. Úèelom triedy je pomoc ïal¹ej generácii rie¹iteµov.

\bigskip
\textbf{Kon¹truktor} 

\emph{\textbf{ExampleProcess}()}

Vola rodièovský kon¹truktor a predáva mu svoje meno ako parameter.\\

\textbf{Metody:}\\
\emph{public void \textbf{run}()}

Hlavná metóda vlákna. V cykle èaká na záznamy o tokoch vo svojom vstupnom bufferi \emph{(inputBuffer)} a 
postupne ich odtiaµ èíta a odstraòuje. Nazvime ich 
\emph{vstupné záznamy}. Vstupný buffer jej napåòa trieda \verb|FlowRecordDispatcher|. Po preèítaní 
vstupného záznamu vytvorí a inicializuje \emph{výstupný záznam}. Následne prechádza v¹etky dátové záznamy
vstupného záznamu, dekóduje ich, anonymizuje zdrojovú a cieµovú IP adresu a naspa» zakóduje. Ak v¹etko 
prebehlo bez problémov, tak dátový záznam priradí výstupnému záznamu. Napokon výstupný záznam o toku 
posunie distribútorovi záznamov, ktorý ho buï prepo¹le 
nasledujúcemu sprostredkovateµskému procesu, alebo pripraví na export. \\


\emph{private String \textbf{anonymizeIPv4}(String address)}

Metóda na veµmi jednoduchú anonymizáciu IP adresy, èíslo v poslednom oktete zmení na 0.\\
\textbf{Parametre:}\\
\emph{String} address - IP adresa, ktorá sa anonymizova» \\
\textbf{Návratová hodnota:}\\
Anonymizovaná IP adresa, vrátená ako re»azec.



\subsubsection{Trieda IPInputBuffer}

Reprezentuje vstupnú pamä» sprostredkovateµských modulov. Táto trieda je vyrovnávacou pamä»ou pre 
záznamy o tokoch. 
Jej pou¾itie je kritické vo vysokorýchlostných sie»ach, preto¾e udr¾iava elementy a tým pádom mô¾e 
vyrovnáva» nárazový nápor. Je synchronizovaná a jej implementácia je FIFO front typu \verb|ArrayBlockingQueue|.\\

\textbf{Metódy:}

\emph{public boolean \textbf{write}(IPFIXFlowRecord flowRecord)}

Zapisuje záznamy o tokoch do frontu. Ak je front plný, záznam sa zahadzuje.\\
\textbf{Parametre:}\\
\emph{IPFIXFlowRecord} flowRecord - záznam o toku\\
\textbf{Návratová hodnota:}\\
Pravdivostná hodnota podµa toho, èi záznam bol, alebo nebol zapísaný do vyrovnávacej pamäte.\\


\emph{public void \textbf{write}(IPFIXTemplateRecord template, ArrayList$<$IPFIXDataRecord$>$ dataRecords, IPFIXMessage.IPFIXMessageHeader messageHeader)}

Metóda obalí prijaté parametre do objektu triedy \verb|IPFIXFlowRecord| a zavolá predchádzajúcu metódu.\\
\textbf{Parametre:}\\
\emph{IPFIXTemplateRecord} template - ¹ablóna\\
\emph{ArrayList$<$IPFIXDataRecord$>$} dataRecords - pole dátových záznamov\\
\emph{IPFIXMessage.IPFIXMessageHeader} messageHeader - hlavièka IPFIX správy, z ktorej tento záznam o toku 
pochádza\\



\emph{public IPFIXFlowRecord \textbf{read}()}

Preèíta a zma¾e vrchol frontu. Ak je front prázdny èaká dokiaµ sa tam nejaký element nepridá.\\
\textbf{Návratová hodnota:}\\
Objekt triedy \verb|IPFIXFlowRecord|.\\
\textbf{Hád¾e:}\\
\verb|InterruptedException| - Ak nastala chyba pri synchronizovaní vlákien, alebo ak bolo vlákno preru¹ené 
poèas èakania.



%----------COLLECTING --------------------------------------

\subsection{Bal\'ik sk.tuke.cnl.bm.Mediator.collecting}

Zjednodu¹ený diagram tried tohto balíka mô¾eme vidie» na Obrázku~\ref{o:collecting1_class} 
a~na~Obrázku~\ref{o:collecting2_class}.

\begin{figure}[ht!]
\centering
\includegraphics[width=1.0\textwidth]{collecting1_class}
\caption{Diagram tried prvej fázy zhroma¾ïovacieho procesu}\label{o:collecting1_class}
\end{figure}


\subsubsection{Trieda UDPServer}
Slú¾i ako UDP server. Prijíma UDP datagramy cez \verb|DatagramChannel| a ukladá ich do 
\verb|PacketCache|. 

\bigskip
\textbf{Kon¹truktor} 

\textit{public \textbf{UDPServer}(int port)}

Kon¹truktor inicializuje \verb|DatagramChannel|, nastaví mu blokovací re¾im a privia¾e ho k~portu 
definovanom v~konfiguraènom súbore, ktorý mu je predaný ako parameter. Nastaví meno vlákna.\\
\textbf{Parametre:} \\
\emph{int} port - èíslo portu

\bigskip
\textbf{Metódy}

\textit{public void \textbf{run}()}

Hlavná metóda vlákna. Pokiaµ nedôjde k~preru¹eniu, prijíma cez vytvorený kanál dáta od exportéra. 
Prijaté dáta obalí do objektu \verb|ByteBuffer| a predá ich spolu s èasom prijatia a IP adresou a 
portom exportéra metóde \emph{write()}, ktorá ich zapí¹e do \verb|PacketCache|.


\textit{public void \textbf{cleanUp}()}

Táto metóda zru¹í èistiace vlákno pre UDP Template Cache. Je volaná pri preru¹ení tohto vlákna.

\begin{figure}[ht!]
\centering
\includegraphics[width=1.0\textwidth]{collecting2_class}
\caption{Diagram tried druhej fázy zhroma¾ïovacieho procesu}\label{o:collecting2_class}
\end{figure}
%---------

\subsubsection{Trieda IpfixParser}
Táto trieda sa pou¾íva na parsovanie IPFIX správ a ich spracovanie. V porovnaní s verziou 
v aplikácii JXColl bola preèistená. Boli vypustené sekcie spracovávajúce TCP a SCTP spojenia. 
Zásadnej¹ia zmena pri¹la na výstupe z triedy. Sparsované dátové záznamy sú zabalené do vytvoreného 
objektu triedy 
\verb|IPFIXFlowRecord|, spolu s príslu¹nou ¹ablónou a hlavièkou prijatej IPFIX správy. Vytvorený 
záznam o toku je spolu s re»azcom predstavujúcim zdroj záznamu (v tomto prípade \uv{exportér})
posunutý triede \verb|FlowRecordDispatcher|.




% --------------------- EXPORTING ---------------------------

\subsection{Bal\'ik sk.tuke.cnl.bm.Mediator.exporting}

Diagram tried exportovacieho procesu je na Obrázku~\ref{o:exporting_class}.

\begin{figure}[ht!]
\centering
\includegraphics[width=1.0\textwidth]{exporting_class}
\caption{Diagram tried exportovacieho procesu}\label{o:exporting_class}
\end{figure}

\subsubsection{Trieda ExportCache}

Analógia k triede \verb|IPInputBuffer|. Reprezentuje exportovaciu pamä», ktorá je synchronizovaná a 
jej implementácia je FIFO front typu \verb|ArrayBlockingQueue|.

\textbf{Metódy:}

\emph{public static boolean \textbf{write}(IPFIXFlowRecord flowRecord)}

Zapisuje záznamy o tokoch do frontu. Ak je front plný, záznam sa zahadzuje.\\
\textbf{Parametre:}\\
\emph{IPFIXFlowRecord} flowRecord - záznam o toku\\
\textbf{Návratová hodnota:}\\
Pravdivostná hodnota podµa toho, èi záznam bol, alebo nebol zapísaný do pamäte.\\



\emph{public static IPFIXFlowRecord \textbf{read}()}

Preèíta a zma¾e vrchol frontu. Ak je front prázdny èaká dokiaµ sa tam nejaký element nepridá.\\
\textbf{Návratová hodnota:}\\
Objekt triedy \verb|IPFIXFlowRecord|.\\
\textbf{Hád¾e:}\\
\verb|InterruptedException| - Ak nastala chyba pri synchronizovaní vlákien, alebo ak bolo vlákno preru¹ené 
poèas èakania.\\



\emph{public static int \textbf{getSize}()}

\textbf{Návratová hodnota:}\\
Vracia poèet elementov v pamäti.



\subsubsection{Trieda MessageEncoder}

Trieda slú¾i na zakódovanie resp. zabalenie záznamu o toku do IPFIX paketu podµa ¹pecifikácie v 
RFC 5101 \citep{rfc5101} a RFC 5102 \citep{rfc5102}.\\
\\

\textbf{Metódy:}


\emph{public static MessageEncoder \textbf{getInstance}()}

\textbf{Návratová hodnota:}\\
Metóda vracia jedineènú in¹tanciu objektu triedy podµa návrhového vzoru \emph{Singleton}.\\



\emph{protected byte[] \textbf{createIPFIXMessage}(IPFIXFlowRecord flowRecord)}

Na základe záznamu o toku vytvára prúd bytov z IPFIX správy. Volá jednotlivé metódy, ktoré robia 
èiastkové úlohy ako zakódovanie sád, hlavièky a podobne.\\
\textbf{Parametre:}\\
\emph{IPFIXFlowRecord} flowRecord - záznam o toku\\
\textbf{Návratová hodnota:}\\
Pole bytov prúdu IPFIX správy.\\



\emph{private byte[] \textbf{encodeMessageHeader}(IPFIXMessage.IPFIXMessageHeader header, short length)}

Zakóduje hlavièku IPFIX správy.\\
\textbf{Parametre:}\\
\emph{IPFIXMessage.IPFIXMessageHeader} header - hlavièka, ktorá sa má zakódova»\\
\emph{short} length - celková då¾ka IPFIX správy\\
\textbf{Návratová hodnota:}\\
Pole bytov prúdu hlavièky IPFIX správy.\\



\emph{private byte[] \textbf{encodeTemplateRecord}(IPFIXTemplateRecord templateRecord)}

Zakóduje záznam ¹ablóny.\\
\textbf{Parametre:}\\
\emph{IPFIXTemplateRecord} templateRecord - záznam ¹ablóny, ktorý sa má zakódova»\\
\textbf{Návratová hodnota:}\\
Pole bytov prúdu záznamu ¹ablóny.\\



\emph{private byte[] \textbf{encodeTemplateSet}(byte[] templateRecordBytes)}

Zakóduje sadu ¹ablón.\\
\textbf{Parametre:}\\
\emph{byte[]} templateRecordBytes - pole bytov prúdu záznamov ¹ablóny, ktoré obsahuje sada ¹ablóny\\
\textbf{Návratová hodnota:}\\
Pole bytov prúdu sady ¹ablón.\\



\emph{private byte[] \textbf{encodeDataRecord}(IPFIXDataRecord dataRecord)}

Zakóduje dátový záznam.\\
\textbf{Parametre:}\\
\emph{IPFIXDataRecord} dataRecord - dátový záznam, ktorý sa má zakódova»\\
\textbf{Návratová hodnota:}\\
Pole bytov prúdu dátového záznamu.\\


\emph{private byte[] \textbf{encodeDataSet}(ByteArrayOutputStream dataRecordsStream, int templateID)}

Zakóduje dátovú sadu.\\
\textbf{Parametre:}\\
\emph{ByteArrayOutputStream} dataRecordsStream - prúd bytov dátových záznamov, ktoré obsahuje sada ¹ablóny\\
\emph{int} templateID - ID prislúchajúcej ¹ablóny \\
\textbf{Návratová hodnota:}\\
Pole bytov prúdu dátovej sady.



\emph{private byte[] \textbf{appendByteArray}(byte[] first, byte[] second)}

Pomocná metóda, ktorá na koniec prvého poµa bytov pripojí druhé pole bytov .\\
\textbf{Parametre:}\\
\emph{byte[]} first - prve pole bytov \\
\emph{byte[]} second - druhe pole bytov\\
\textbf{Návratová hodnota:}\\
Pole bytov výsledného poµa.\\


\emph{private short \textbf{getMessageLength}(byte[] templateSetBytes, byte[] dataSetBytes, byte[] optionsTemplateSetStream)}

Vracia celkovú då¾ku IPFIX správy.\\
\textbf{Parametre:}\\
\emph{byte[]} templateSetBytes - pole bytov sady ¹ablón\\
\emph{byte[]} dataSetBytes - pole bytov dátovej sady\\
\emph{byte[]} optionsTemplateSetStream - pole bytov sady ¹ablón mo¾ností\\
\textbf{Návratová hodnota:}\\
Celková då¾ka IPFIX správy, vrátane hlavièky. Návratový typ je \emph{short}.



\subsubsection{Trieda UDPExporter}


Trieda je samostatným vláknom, záznamy o toku èíta z ExportCache. Tie potom po¹le triede 
\verb|MessageEncoder|, ktorá ich zabalí do IPFIX správ. Zakódované správy exportuje kolektoru na IP 
adresu a port, ktoré sú definované v konfiguraènom súbore. \\

\textbf{Kon¹truktor:}

\emph{private \textbf{UDPExporter}()}

Bezparametrický kon¹truktor. Vola rodièovský kon¹truktor s parametrom svojho mena. Potom sa pokúsi 
vytvori» socket pomocou triedy \verb|DatagramSocket|.\\

\textbf{Metódy:}

\emph{public static MessageEncoder \textbf{getInstance}()}

\textbf{Návratová hodnota:}\\
Metóda vracia jedineènú in¹tanciu objektu triedy podµa návrhového vzoru \emph{Singleton}.\\


\emph{public void \textbf{run}()}

Hlavná metóda vlákna. Dokiaµ nie je vlákno preru¹ené, cyklicky èíta záznamy o toku z ExportCache.
Prostredníctvom triedy \verb|MessageEncoder| vytvorí zo záznamu o toku výstupný prúd bytov. 
Ten spolu s då¾kou prúdu, IP adresou a portom zabalí do paketu - objektu triedy \verb|DatagramPacket|.
Vzniknutý paket odo¹le.



% --------------------- EXCEPTIONS ---------------------------

\subsection{Bal\'ik sk.tuke.cnl.bm.exceptions}

Balík obsahuje triedy výnimiek ¹pecifických pre Mediátor. V¹etky výnimky dedia od hlavnej triedy 
výnimiek - \verb|MediatorException|.




\clearpage
\section{Preklad programu}

\subsection{Zoznam zdrojov\'ych textov}
Zdrojové texty sú k~dispozícii v~prílohe diplomovej práce.

\noindent Sú k~dispozícii tieto zdrojové texty:

\begin{verbatim}
- balík sk.tuke.cnl.bm.Mediator:
   Config.java
   Default.java
   DropsCounter.java
   FlowRecordDispatcher.java
   IPLoader.java
   Mediator.java
   Support.java
- balík sk.tuke.cnl.bm.Mediator.IPFIX:
   ExporterKey.java
   FieldSpecifier.java
   IPFIXDataRecord.java
   IPFIXDecoder.java
   IPFIXElements.java
   IPFIXEncoder.java
   IPFIXFlowRecord.java
   IPFIXMessage.java
   IPFIXOptionsTemplateRecord.java
   IPFIXSet.java
   IPFIXTemplateRecord.java
   IpfixUdpTemplateCache.java
   TemplateHolder.java
- balík sk.tuke.cnl.bm.Mediator.IntermediateProcesses:
   AIntermediateProcess.java
   ExampleProcess.java
   IPInputBuffer.java
- balík sk.tuke.cnl.bm.Mediator.collecting:
   IPFIXParser.java
   PacketCache.java
   PacketObject.java
   UDPProcessor.java
   UDPServer.java
- balík sk.tuke.cnl.bm.Mediator.exporting:
   ExportCache.java
   MessageEncoder.java   
   UDPExporter.java
- balík sk.tuke.cnl.bm.exceptions:
   DataException.java
   DataFormatException.java
   EncodingException.java
   IPLoaderException.java
   MediatorException.java
   OutOfBoundsException.java
   TemplateException.java
\end{verbatim}



\subsection{Po\v{z}iadavky na technick\'e prostriedky pri preklade}

Preklad programu si vy¾aduje nasledovnú hardvérovú konfiguráciu:
\begin{itemize}
  \item CPU Intel Pentium III 1Ghz alebo ekvivalent
  \item operaèná pamä» 256MB
  \item pevný disk s~1GB voµného miesta
  \item sie»ová karta 100Mb/s
\end{itemize}
\noindent




\subsection{Po\v{z}iadavky na programov\'e prostriedky pri preklade}
\begin{itemize}
\item operaèný systém GNU/Linux s~verziou jadra 2.6 a vy¹¹ou 
\item Java Runtime Environment (JRE) verzie 1.7.0\_03 a~vy¹¹ej
\item kni¾nice dodávané na in¹talaènom médiu
\end{itemize}




\subsection{N\'aväznos\v{t} na in\'e programov\'e produkty}

Program umo¾òuje sprostredkovanie správ medzi meracím/exportovacím procesom a zhroma¾ïovacím procesom 
IPFIX architektúry, ktoré budú následne vyhodnotené príslu¹nými aplikáciami. Je implementáciou 
\emph{(IP Flow Information Export (IPFIX) Mediation Problem)} v architektúre SLAmeter.
Z~toho vyplýva jeho náväznos» na merací/exportovací proces - BEEM a zhroma¾ïovací proces - JXColl 
(alebo iné implementácie týchto procesov).




\subsection{Vlastn\'y preklad}

Preklad programu spoèíva v~nakopírovaní zdrojových súborov a~spustení kompilátora jazyka
Java s~potrebnými parametrami a~parametrom classpath nastaveným na prídavné kni¾nice.
Odporúèa sa pou¾i» vá¹ obµúbený java IDE, kde staèí jednoducho nastavi» verziu JDK na 7.0
alebo vy¹¹ie a~do cesty classpath prida» cesty ku v¹etkým potrebným kni¾niciam. V~prostredí
NetBeans IDE potom staèí kliknú» na tlaèidlo \textit{Clean and Build}.




\subsection{Vytvorenie in\v{s}tala\v{c}n\'eho DEB s\'uboru}
Staèí spusti» skript \texttt{buildDeb.sh}, ktorý sa nachádza v~prieèinku /deb.

\begin{center}
\texttt{sh buildDeb.sh }
\end{center}

Výstupom tohto skriptu je súbor s~názvom \texttt{debian.deb}, ktorý mô¾me následne premenova» podµa verzie Mediátora 
(napríklad na mediator\_1.0\_i386.deb). 
Tento skript vykonáva nasledovné:

\begin{enumerate}
\item v~prípade, ak neexistuje prieèinok debian, extrahuje ho z~archívu debian.tar.gz, inak tento krok preskoèí
\item skopíruje binárny súbor z~projektu do DEB balíèka (predpokladá sa, ¾e bol program kompilovaný v~Netbeans IDE pomocou Clean and Build tlaèidla)
\item skopíruje konfiguraèný súbor z~projektu do DEB balíèka
\item skopíruje IPFIX definièný súbor z~projektu do DEB balíèka
\item vyma¾e prípadné doèasné súbory z~DEB balíèka
\item vygeneruje MD5 kontrolné súèty pre v¹etky súbory DEB balíèka
\item zabezpeèí maximálnu kompresiu manuálových stránok a changelog súborov
\item skopíruje binárny súbor z~projektu do DEB balíèka a nastaví mu práva na vykonávanie
\item vytvorí samotný DEB balíèek
\item overí ho pomocou programu lintian - ten vypí¹e prípadne varovania a/alebo chyby
\item archivuje vytvorený DEB balíèek do archívu debian.tar.gz
\end{enumerate}

Pred spustením skriptu je nutné skompilova» Mediátor pomocou Netbeans IDE tlaèidlom \textit{Clean and Build}. 
Prípadné zmeny control alebo changelog súboru, manuálových stránok je nutné vykona» ruène. 
Manuálové stránky je vhodné upravi» pomocou programu \textit{GmanEdit} . Po spustení skriptu sa vytvorí 
DEB balíèek s~názvom \texttt{debian.deb}. Ten je vhodné premenova» podµa aktuálnej verzie. 
Vytvorí sa aj archív \texttt{debian.tar.gz}, ktorý obsahuje najaktuálnej¹iu adresárovú ¹truktúru 
DEB balíèka pre budúce vyu¾itie (ak neexistuje prieèinok debian, vytvorí sa extrakciou z~tohto archívu). 
Ak je potrebné len aktualizova» kód, staèí spusti» skript a ten sa o~v¹etko postará, prièom vytvorí aj 
adresár debian. Súbory mo¾no v~òom upravova» a¾ kým nie je v¹etko podµa predstáv. Ak je v¹etko hotové, 
v~Netbeans IDE je potrebné vymaza» prieèinok debian (vykoná sa SVN DELETE, namiesto obyèajného 
odstránenia zo súborového systému) a projekt ''commitnú»''. \citep{jxcoll_sp, ado_dp}


\subsection{Opis zn\'amych ch\'yb}
V~súèasnosti nie sú známe ¾iadne vá¾ne chyby.


\newpage
\section{Zhodnotenie rie\v{s}enia}
%Hlavným cieµom práce bolo zvý¹i» interoperabilitu s~inými IPFIX rie¹eniami pomocou zvý¹enia konformity so ¹tandardom IPFIX. 
%V~práci boli vyrie¹ené problémy, ktoré doteraz znemo¾òovali dekódovanie viacerých záznamov sade, informaèncých elementov s~variabilnou då¾kou, informaèných elementov s~redukovaným kódovaním alebo niektorých predtým neimplementovaných dátových typov. 
%
%Súèas»ou práce bolo roz¹írenie podpory prenosu údajov o~tokoch prostredníctvom transportných protokolov TCP a SCTP, èo zvy¹uje mo¾nosti
%nasadenia nástroja BasicMeter aj v~podmienkach s~vy¹¹ou náchylnos»ou na pre»a¾enie v~sietí. 
%
%Mo¾nosti budúceho vývoja zhroma¾ïovacieho procesu nástroja BasicMeter predstavuje implementácia podpory pre dátové typy umo¾òujúce
%prenos ¹truktúrovaných dát a podpora pre zabezpeèené pripojenia od exportérov.
%


\clearpage
\addcontentsline{toc}{section}{\numberline{}Zoznam pou\v{z}itej literat\'ury}
\begin{thebibliography}{999}

\harvarditem{Sadasivan, et al.}{2009}{rfc5470}
SADASIVAN, G. et al.: \emph{Architecture for IP Flow Information Export} 
RFC 5470. 2009

\harvarditem{Kobayashi, Claise}{2010}{rfc5982}
KOBAYASHI, A. -- CLAISE, B. et al.: \emph{IP Flow Information Export (IPFIX) Mediation: Problem Statement.} 
RFC 5982. 2010

\harvarditem{Kobayashi et al.}{2011}{rfc6183}
KOBAYASHI, A. et al.: \emph{IP Flow Information Export (IPFIX) Mediation: Framework.} 
RFC 6183. 2011

\harvarditem{Claise et al.}{2008}{rfc5101}
CLAISE, B. et al.: \emph{Specification of the IP Flow Information Export 
(IPFIX) Protocol for the Exchange of IP Traffic Flow Information.} 
RFC 5101. 2008

\harvarditem{Quittek, et al.}{2008}{rfc5102}
QUITTEK, J. et al.: \emph{Information Model for IP Flow Information Export} 
RFC 5102. 2008

\harvarditem{Claise}{2004}{rfc3954}
CLAISE, B.: \emph{Cisco Systems NetFlow Services Export Version 9.} 
RFC 3954. 2004

\harvarditem{Vere¹èák}{2012}{jxcoll_sp}
VERE©ÈÁK, T.: Optimalizácia zhroma¾ïovacieho procesu nástroja BasicMeter, 2012,
Diplomová práca, Príloha A, Systémová príruèka JXColl v3.9, KPI FEI TU, Ko¹ice

\harvarditem{Pekár}{2009}{ado_bc}
PEKÁR, A.: Meranie prevádzkových parametrov siete v~reálnom èase, 2009,
Bakalárska práca, KPI FEI TU, Ko¹ice

\harvarditem{Pekár}{2011}{ado_dp}
PEKÁR, A.: Optimalizácia zhroma¾ïovacieho procesu nástroja BasicMeter, 2011,
Diplomová práca, KPI FEI TU, Ko¹ice

\end{thebibliography}