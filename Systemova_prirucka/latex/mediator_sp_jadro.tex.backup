%%
\section{Funkcia programu}

Program Mediator je implementaciou aplikacneho ramca pre problem sprostredkovania sprav v protokole IPFIX 
\emph{(IP Flow Information Export (IPFIX) Mediation Problem)} vyvijany vyskumnou skupinou MONICA sidliacou
v Laboratoriu pocitacovych sieti \emph{(CNL)} na Technickej Univerzite v Kosiciach. Je sucastou meracej
architektury SLAmeter, ktorej ulohou je pasivne meranie parametrov sietovej prevadzky na baze tokov. 
Na zaklade nameranych hodnot urcuje triedu kvality sluzieb a Internetoveho pripojenia poskytovatelov 
Internetu. Trieda kvality vypoveda o dodrziavani zmluvy o urovni poskytovanej sluzby - \emph{SLA}.

Mediaotrebnú pre ¹iroký rad meracích aplikácii.
Sprostredkovatelske moduly Mediatora mozu z pohµadu manipulácie s dátami poskytova» agregáciu, koreláciu,
filtrovanie, anonymizáciu 
a iné úpravy záznamov o tokoch za úèelom ¹etrenia výpoètových zdrojov meracieho systému a vykonávania 
predspracovania úloh pre kolektor. Z hµadiska interoperability nástrojov rôznych vývojárov, mô¾u 
poskytova» konverziu z iných protokolov na IPFIX, respektíve zvy¹ova» spoµahlivos» exportov
napríklad prevodom z nespoµahlivého, bezspojovo orientovaného protokolu UDP na spoµahlivý SCTP. 

Program bol v roku 2013 vytvorený Rastislavom Kudlom v ramci jeho diplomovej prace.



\section{Analýza problému}

Problematika sprostredkovania IPFIX správ je podrobne spracovaná v \citep{rfc5982}. 
Hovori o tom, ¾e sie»oví administrátori èasto celia problémom týkajúcim sa ¹kálovateµnosti meracieho 
systému, flexibility monitorovania na základe tokov, alebo aj spoµahlivosti exportovania.
Napriek tomu, ¾e sa vyvinuli známe techniky ako \emph{vzorkovanie a filtrovanie  paketov}, \emph{zoskupovanie 
dátových záznamov}, alebo \emph{replikácia exportu}, tieto problémy nevymizli.
Pozostávajú z prispôsobovania niektorých parametrov meracích nástrojov zdrojom meracieho 
systému zatiaµ èo musia naplni» patrièné podmienky ako sú \emph{presnos» nameraných dát}, \emph{granularita 
toku}, èi \emph{spoµahlivos» exportu}. Tieto okolnosti závisia na dvoch faktoroch:
\begin{enumerate}
 \item \textbf{Kapacita  meracieho systému} - pozostáva zo ¹írky pásma  spravovanej siete, kapacity 
 úlo¾iska a výkonu exportovacích a zhroma¾ïovacích nástrojov
 
 \item \textbf{Po¾iadavky aplikácie} - rôzne aplikácie vy¾adujú rôznu zrnitos» záznamov o tokoch a presnos» dát.
\end{enumerate}


\subsection{Vybrané príklady pou¾itia sprostredkovania správ} \label{sec:mediator_examples}

RFC 5982 \citep{rfc5982} uvádza viacero príkladov zaradenia IPFIX Mediátora do klasickej
exportér - kolektor architektúry. Uveïme aspoò niektoré:
\begin{itemize}
  \item prispôsobovanie granularity tokov,
  \item distribuovaná zhroma¾ïovacia infra¹truktúra,
  \item spájanie èasu,
  \item spájanie priestoru,
\begin{itemize}
  \item spájanie priestoru v rámci jednej pozorovacej domény,
  \item spájanie priestoru viacerých pozorovacích domén jedného exportéra,
  \item spájanie priestoru niekoµkých exportérov,
  \item spájanie priestoru administratívnych domén,
\end{itemize}
  \item anonymizácia dátových záznamov,
  \item distribúcia dátových záznamov,
  \item konverzia z protokolu nizsej verzie na IPFIX,
\end{itemize}



\subsection{Analýza aplikaèného rámca pre IPFIX Mediátor} 

Analýze aplikaèného rámca pre sprostredkovanie správ v IPFIX sa venuje RFC 6183 \citep{rfc6183}. 
Na Obrazku \ref{o:mediation_reference_model} je zobrazeny referenèný model sprostredkovania správ v IPFIX 
ako roz¹írenie referenèného modelu IPFIX, popísaného v \emph{Architecture for IP Flow Information Export} 
\citep{rfc5470}. Táto schéma zobrazuje mo¾né scenáre, ktoré mô¾u existova» v meracej architektúre.

\begin{figure}[ht!]
\centering
\includegraphics[width=0.9\textwidth]{mediation_reference_model}
\caption{Referenèný model sprostredkovania správ v IPFIX}\label{o:mediation_reference_model}
\end{figure}

Funkèné komponenty v rámci ka¾dej entity sú ohranièené zátvorkami []. Mediátor mô¾e prijíma» 
záznamy o toku od iných mediátorov a exportérov a prúd záznamov z iných zdrojov.
Za iné zdroje sa pova¾ujú nástroje iných protokolov, ako napríklad NetFlow exportéry \citep{rfc3954}. 
Spracovane dáta vo forme záznamov o toku potom exportuje jednému alebo viacerým kolektorom a mediátorom.

\begin{figure}[ht!]
\centering
\includegraphics[width=0.7\textwidth]{mediator_component_model}
\caption{Zjednodu¹ený model komponentov IPFIX Mediátora}\label{o:mediator_component_model}
\end{figure}

Zjednodu¹ený model komponentov IPFIX mediátora je predstavuje Obrázok \ref{o:mediator_component_model}. 
Mediátor obsahuje jeden alebo viac sprostredkovateµských procesov, hierarchicky ulo¾ených 
medzi jedným alebo viacerými exportovacími a zhroma¾ïovacími procesmi. Tento model sa týka 
najbe¾nej¹ieho prípadu, kedy mediátor prijíma dátové záznamy od exportéra, alebo iného mediátora.

Sprostredkovateµské procesy sú kµúèovými funkènými blokmi sprostredkovania správ v IPFIX. Musia pokry» 
ka¾dý príklad pou¾itia sprostredkovania správ z kapitoly \ref{sec:mediator_examples}. 
Mediátor je schopný súèasne podporova» viac ako jeden sprostredkovateµský proces. 
\begin{itemize}
 \item \textbf{Paralelné spracovanie} - Prúd záznamov je spracovaný viacerými sprostredkovateµskými procesmi 
 paralelne. V tomto scenári, ka¾dý sprostredkovateµský proces dostáva kópiu celého prúdu záznamov ako vstup.
 \item \textbf{Sériové spracovanie} - Sprostredkovateµské procesy sú zapojene sériovo. Výstupný prúd 
 záznamov jedného procesu je vstupným prúdom nasledujúceho.
\end{itemize}

%--------------------------------------------

\clearpage

\section{Popis programu}

Jednotlivé èasti programu sú umiestnené v~nasledujúcich balíkoch:

\begin{itemize}
\item \verb|sk.tuke.cnl.bm.Mediator.collecting| - implementacia zhromazdovacieho procesu
\item \verb|sk.tuke.cnl.bm.Mediator.exporting| - implementacia exportovacieho procesu
\item \verb|sk.tuke.cnl.bm.Mediator.IntermediateProcesses| - triedy tvoriace podporu pre sprostredkovatelske 
procesy. Hlavne triedy novych modulov musia byt umiestnene v tomto baliku!
\item \verb|sk.tuke.cnl.bm.Mediator.IPFIX| - triedy s~manuálnou implementáciou protokolu IPFIX
\item \verb|sk.tuke.cnl.bm.Mediator.exceptions| - vlastne vynimky aplikacie
\item \verb|sk.tuke.cnl.bm.Mediator| - hlavné triedy samotného programu
\end{itemize}



\subsection{Popis rie¹enia}


%V~prvom rade bolo potrebné umo¾ni» podporu viacerých záznamov v~sade. Trieda NetXMLParser bola rozdelená na dve samostatné jednotky. Jednou je vlákno UDPProcessor, ktorého úlohou je vybera» údaje z~PacketCache a èas» spracovania bole prepísaná do novej triedy IpfixParser. Parsovanie IPFIX správ bolo  zoptimalizované a upravené do prehµadnej podoby. Celkový problém bol rozdelený na men¹ie úlohy, ktoré sú realizované metódami na parsovanie správy, sady, a v¹etkých druhov záznamov. V~metóde slú¾iacej na spracovanie sady bol pre ka¾dý druh sady pridaný cyklus, ktorý vyberá záznamy zo sady, a¾ kým sa pozícia v~buffri nedostane na koniec sady.
%
%Dekódovanie dát jednotlivých informaèných elementov bolo presunuté do samostatnej  triedy. Podobne ako v~triede IpfixParser je volaná jedna metóda, ktorá na základe dátového typu presunie spracovanie na metódy zaoberajúce sa danou skupinou dátových typov. Údaje z~buffra pre dátový typ octetArray sú prevedené do podoby re»azce v~kódovaní Base64 aby ich bolo mo¾né ulo¾i» v~databáze. Bajt v~buffri pre dátový typ boolean je interpretovaný ako true pri hodnote 1 a ako false pri hodnote 0. V¹etky ostatné hodnoty znamenajú chybu a je to oznámené volajúcej metóde výnimkou DataException. Okrem implementácie dekódovania dátového typu macAddres bola e¹te opravená interpretácia dátových typov dateTimeMicroseconds a dateTimeNanoseconds. Keï¾e sa tieto hodnoty musia zmesti» do ôsmich bajtov vo formáte NTP Timestamp a analyzujúce aplikácie sú postavené na technológii Java, ktorá nepozná bezznamienkové typy, je vhodné ulo¾i» tieto hodnoty v~nezmenenej podobe ako znamienkové 64-bitové èíslo (long). Po získaní èísla 
%z~databázy je mo¾né jednoducho pou¾i» triedu Timestamp z~kni¾nice Apache Commons Net na jednoduch¹iu prácu s~touto èasovou známkou.
%
%Na podporu redukovaného kódovania bola vytvorená metóda handleReducedSizeEncoding(), ktorá zo skráteného informaèného elementu vytvorí buffer plnej veµkosti, ktorý je mo¾né be¾ným spôsobom interpretova». Pre bezznamienkové èísla sa do plnej veµkosti zµava doplnia nulové bajty. Pre záporné znamienkové èísla sa doplnia bajty o~hodnote 255, aby sa zachovala hodnota èísla. Redukovaný mô¾e by» aj dátový typ float64, a to pou¾itím polovièného poètu bajtov. Vtedy sa dáta interpretujú ako float32.
%
%Organizáciou definované informaèné elementy sú definované v~súbore ipfixFields.xml. Aby sa uva¾ovalo èíslo organizácie pre informaèné elementy, musela by» doplnená trieda IpfixElements o~mo¾nos» evidencie informaèných elementov nielen na základe ich identifikátora, ale súèasne s~èíslom organizácie (¹tandardné informaèné elementy sú uva¾ované s~èíslom organizácie 0). Spoloène s~tým v¹etky metódy slú¾iace na prístup k~informáciám o~informaèných elementoch museli by» roz¹írené o~parameter èísla organizácie.
%
%Variabilné informaèné elementy boli implementované v~triede IpfixParser. Pri výbere informaèného elementu, ktorého veµkos» je v~zázname ¹ablóny definovaná ako 65535 je vybratý prvý bajt z~dátovej èasti na aktuálnej pozícii. Ak je tento bajt men¹í ako 255, je vybraných toµko bajtov z~buffra, koµko tento bajt uvádza. Ak má bajt hodnotu 255, då¾ka je získaná z~ïal¹ích dvoch bajtov.
%
%Súèas»ou zmien v~parseri je detekcia po¹kodených správ. Ak je skutoèná veµkos» správy iná ako sa uvádza v~hlavièke, ide o~chybu. Pri ka¾dej chybe je vyhodená výnimka DataFormatException. Chyba je indikovaná aj keï je poèet zostávajúcich bajtov v~buffri men¹í ako veµkos» sady. Pri výbere údajov z~dátového záznamu alebo záznamu ¹ablóny sa testuje náraz na pravú hranicu sady. V~prípade jej dosiahnutia sa tie¾ ohlási chyba.
%
%Na pridanie podpory expirácie ¹ablón musela sa do záznamu ¹ablóny prida» polo¾ka èasu príchod ¹ablóny. Cache bola sprehµadnená a pred parsovaním
%dátového záznamu je overovaná platos» ¹ablóny. V~prípade ak je neplatná, dátová sada sa preskoèí. Ka¾dých 10 minút sa spú¹»a èistiace vlákno, aby vymazalo expirované ¹ablóny a zabránilo tak zaplòovaniu pamäte JXColl.
%Transportné protokoly TCP a SCTP pou¾ívajú vlastnú cache na uschovanie ¹ablón s~platnos»ou len pre konkrétne pripojenie, resp. asociáciu.
%Umo¾òená bola podpora pre zru¹enie ¹ablón pomocou Template Withdrawal správ. V~prípade, ak exportér po¹le u¾ kolektorom evidovanú ¹ablónu, alebo ak ru¹í neexistujúcu ¹ablónu, spojenie, resp. asociácia sa preru¹í. 
%
%Protokoly TCP a SCTP vyu¾ívajú na ka¾dé pripojenie samostatné vlákno. Obidva protokoly poèúvajú na nakonfigurovanom porte a poèet pripojení, resp. asociácií je ohranièený nastavením v~konfiguraènom súbore. Na podporu protokolu SCTP bolo potrebné prejs» na nov¹iu verziu Javy 1.7.




\clearpage
\section{Popis tried, èlenských premenných a~metód}

Ked¾e niektore triedy Mediatora su kvoli jednotnosti rieseni v ramci vyskumnej skupiny MONICA totozne 
s triedami nastroja JXColl, v~nasledujúcich èastiach budú uvedené len tie, ktoré sa tykaju vyhradne 
Mediatora. Popis ostatných tried a~metód je uvedený v~systemovej príruèke programu 
JXColl \citep{jxcoll_sp}.  

% ----------HLAVNY BALIK --------------------------------------

\subsection{Balík sk.tuke.cnl.bm.Mediator}

\subsubsection{Trieda Default}
Trieda predstavuje rozhranie obsahujuce vychodiskove hodnoty konfiguracneho suboru. Neobsahuje konstruktor
ani ziadne metody, iba verejne pristupne staticke konstanty.



\subsubsection{Trieda DropsCounter}
Sluzi na vypocet statistiky zahodenych entit. Pod entitou sa myslia zaznamy o tokoch, datove zaznamy, 
alebo IPFIX pakety. Obsahuje len staticke metody.

\bigskip
\textbf{Metódy} 

\textit{public static void \textbf{inputBufferDropsUP}()}

Zvysuje pocet strat sposobenych preplnenim vstupneho buffera sprostredkovateµských porcesov o jeden. \\
\textbf{Parametre:} \\
\emph{String} processName - meno procesu

\textit{public static void \textbf{exportCacheDropsUP}()}

Zvysuje pocet strat sposobenych \verb|ExportCache| o jeden.

\textit{public static void \textbf{encodingDropsUp}()}

Zvysuje pocet strat sposobenych chybou pri kodovani o jeden.

\textit{public static void \textbf{decodingDropsUp}()}

Zvysuje pocet strat sposobenych chybou pri dekodovani o jeden.

\textit{public static void \textbf{packetDropsUp}()}

Zvysuje pocet IPFIX paketov zahodenych UDP serverom o jeden.

\textit{public static void \textbf{printStats}()}

Vypise statistiku vsetkych zahodenych entit.



\subsubsection{Trieda FlowRecordDispatcher}
Ulohou tejto triedy je na zaklade konfiguracneho suboru distribuovat prijate zaznamy o toku 
sprostredkovatelskym procesom (seriovo alebo paralelne) a exportovaciemu porcesu. Distribucia prebieha
v sulade s IPFIX Mediator Framework (RFC 6183). Tato trieda je implementovana podla navrhoveho vzoru 
\emph{Singleton}.

\bigskip
\textbf{Metódy} 

\textit{public static FlowRecordDispatcher \textbf{getInstance}()}

Implementuje vzor \emph{Singleton}. Vytvori a vrati jedinecnu instanciu v pripade ze neexistuje, v opacnom pripade 
ju iba vrati. \\
\textbf{Návratová hodnota:} \\
Jedinecny objekt typu \verb|FlowRecordDispatcher|.


\textit{public synchronized void \textbf{dispatchFlowRecord}()}

Posiela prijate zaznamy o tokoch prislusnym sprostredkovatelskym procesom, alebo exportovaciemu procesu 
podla konfiguracie. Najprv ziska zoznam prijimatelov toku na zaklade mena povodcu. Ak je zoznam prazdny - 
zaznam o toku je 
urceny na export, preto ho zapise do \verb|ExportCache|. Ak zoznam nie je prazdny, ziska si instancie 
prijimatelov toku a zaznam im zapise do vstupneho buffera. Tato metoda je synchronizovana, lebo je
pristupna viacerym vlaknam. \\
\textbf{Parametre:} \\
\emph{IPFIXFlowRecord} flowRecord - zaznam o toku, ktory sa ma distribuovat dalej \\
\emph{String} inputProcess - meno povodcu zaznamu o toku

\textit{private void \textbf{fillInputBuffer}()}

Metoda, ktora zapisuje zaznamy o tokoch do vstupneho buffra sprostredkovatelskych procesov. V pripade
neuspechu za zvysi pocitadlo v \verb|DropsCounter| a vypise error. \\
\textbf{Parametre:} \\
\emph{AIntermediateProcess} process - instancia sprostredkovatelskeho procesu \\
\emph{IPFIXFlowRecord} flowRecord - zaznam o toku, ktory sa ma zapisat

\textit{private ArrayList$<$String$>$ \textbf{getReceiversList}()}

Ziskava zoznam prijemcov zaznamu o toku od zadaneho povodcu toku. \\
\textbf{Parametre:} \\
\emph{String} inputDevice - povodca zaznamu o toku \\
\textbf{Návratová hodnota:} \\
Zoznam prijemcov toku, typ \verb|ArrayList|.



\subsubsection{Trieda IPLoader}
Trieda je zodpovedna za dynamicke nacitavanie sprostredkovatelskych procesov definovanych v konfiguracnom
subore. Implementuje navrhovy vzor \emph{Singleton}.

\bigskip
\textbf{Metódy} 

\textit{public static IPLoader \textbf{getInstance}()}

Implementuje vzor \emph{Singleton}. Vytvori a vrati jedinecnu instanciu v pripade ze neexistuje, v opacnom pripade 
ju iba vrati.


\textit{public void \textbf{loadProcesses}()}

Hlavna metoda triedy, dynamicky nacitava sprostredkovatelske moduly definovane v konfiguracnom subore. 
Najprv ziska systemovy \emph{classLoader}. V cykle prechadza zoznam spostredkovatelskych modulov. 
Kazdy retazec obsahujuci meno prevedie na binarne meno (meno triedy vratane balickov)  a pomocou 
classLoader-a ziska jeho \verb|Class| objekt. Na zaklade tohto objektu ziska jedinecnu instanciu 
modulu a kedze sa jedna o vlakno, spusti ho tak, ze zavola jeho metodu \verb|start()|. \\
\textbf{Hád¾e:} \\
\verb|IPLoaderException| - V pripade akejkolvek chyby, ktora moze nastat pri vykonavani metody. Chyby, ktore 
su zachytavane su typov:
\begin{itemize}
 \item \verb|SecurityException|
 \item \verb|ClassNotFoundException|
 \item \verb|IllegalAccessException|
 \item \verb|NoSuchMethodException|
 \item \verb|InvocationTargetException|
\end{itemize}



\subsubsection{Trieda Mediator}
Ulohou hlavnej triedy Mediatora je postupne spustit vsetky vlakna a procesy potrebne pre beh programu.
Najprv sa precitaju a spracuju argumenty prikazoveho riadku. Program vie rozpoznavat dva druhy 
argumentov. Prvym je cesta ku konfiguracnemu suboru. Ak nie je zadana, pouziva sa vychodiskovy 
konfiguracny subor. Druhym argumentom moze byt zadana moznost \verb|--logtofile|. Vtedy su vsetky 
logovacie vystupy presmerovane zo standardneho vystupu do suboru.

Potom ako program nacita vsetky nastavenia z konfiguracneho suboru, spusti vsetky svoje moduly - 
sprostredkovateµské procesy pomocou triedy \verb|IPLoader|. Nasleduje spustenie vlakna, ktore prijima 
IPFIX pakety prostrednictvom protokolu UDP a vlakna, ktore ich spracovava. Hovorime o \verb|UDPServer| 
a \verb|UDPProcessor|. Nakoniec je spustene exportovacie vlakno - \verb|UDPExporter|. Kedykolvek ked 
nastane chyba je Mediator korektne ukonceny a to tak, ze uvolni vsetku pamat a zastavi beziace vlakna. 
Rovnako je Mediator zastaveny po stlaceni kombinacie klaves \verb|Ctrl+c|.

\bigskip
\textbf{Metódy} 

\textit{public static void \textbf{main}()}

Hlavna metoda triedy. \\
\textbf{Parametre:} \\
\emph{String[]} args - argumenty prikazoveho riadku.


\emph{public static void \textbf{stopMediator()}}

Metoda, ktora korektne ukoncuje beh programu. Zastavi vsetky spustene vlakna a uvolni vsetky druhy pamate.

\emph{public static void \textbf{interruptThread()}}

Prerusi vykonavanie vlakna. \\
\textbf{Parametre:} \\
\emph{Thread} thread - objekt vlakna, ktore sa ma zastavit.


\emph{private static void \textbf{loggingToFile()}}
    
    













 ----------COLLECTING --------------------------------------

\subsection{Balik sk.tuke.cnl.bm.Mediator.collecting}

\subsubsection{Trieda UDPServer}
Slú¾i ako UDP server. Prijíma UDP datagramy cez \verb|DatagramChannel| a uklada ich do 
\verb|PacketCache|. 

\bigskip
\textbf{Kon¹truktor} 

\textit{public \textbf{UDPServer}()}

Kon¹truktor inicializuje \verb|DatagramChannel|, nastaví mu blokovací re¾im a privia¾e ho k~portu 
definovanom v~konfiguraènom súbore, ktory mu je predany ako parameter. Nastaví meno vlákna.\\
\textbf{Parametre:} \\
\emph{int} port - cislo portu

\bigskip
\textbf{Metódy}

\textit{public void \textbf{run}()}

Hlavná metóda vlákna. Pokiaµ nedôjde k~preru¹eniu, prijima cez vytvoreny kanal data od exportéra. 
Prijate data obali do objektu \verb|ByteBuffer| a predá ich spolu s casom prijatia a IP adresou a 
portom exportera metode \emph{write()}, ktora ich zapise do \verb|PacketCache|.

\clearpage
\textit{public void \textbf{cleanUp}()}

Táto metóda zru¹í èistiace vlákno pre UDP Template Cache. Je volaná pri preru¹ení tohto vlákna.


%---------

\subsubsection{Trieda IpfixParser}
Táto trieda sa pou¾íva na parsovanie IPFIX správ a ich spracovanie. V porovnani s verziou 
v aplikacii JXColl bola precistena. Boli vypustene sekcie spracovavajuce TCP a SCTP spojenia. 
Zasadnejsia zmena prisla na vystupe z triedy. Sparsovane datove zaznamy su zabalene do vytvoreneho 
objektu triedy 
\verb|IPFIXFlowRecord|, spolu s prislusnou sablonou a hlavickou prijatej IPFIX spravy. Vytvoreny 
zaznam o toku je spolu s retazcom predstavujucim zdroj zaznamu (v tomto pripade \uv{exporter})
posunuty triede \verb|FlowRecordDispatcher|.

% ------------------------------------------------














% ----------------------------------------------------------




\subsubsection{Trieda IpfixDecoder}
Trieda so statickými metódami slú¾iacimi na dekódovanie dát z~dátového záznamu. \\

\clearpage
\bigskip
{\bfseries Metódy}
\bigskip



\textit{public String \textbf{decode}(String type, ByteBuffer buffer)}

Dekóduje dátový typ obsiahnutý v~buffri do podoby re»azca podµa ¹pecifikácie IPFIX.
Priamo nevykonáva dekódovanie, volá konkrétne metódy podµa kategórie dátového typu.

{\bfseries Parametre:}

type - re»azec definujúci dátový typ obsiahnutý v~buffri.\\
buffer - samotné dáta, ktoré sú predmetom dekódovania\\

{\bfseries Návratová hodnota:}

Re»azec reprezentujúci interpretovanú hodnotu buffra na základ predaného typu.

{\bfseries Hád¾e:}

DataException - Ak je buffer nesprávnej veµkosti vzhµadom na dátový typ\\
UnsupportedDataException - Ak dátový typ nie je podporovaný\\




\textit{public String \textbf{decodeUnsignedIntegralType}(String type, ByteBuffer buffer)}

Dekóduje celoèíselné bezznamiekové dátové typy unsigned8, unsigned16, unsigned32 a unsigned64. Berie ohµad na skrátené dátové typy.

{\bfseries Parametre:}

type - re»azec definujúci dátový typ obsiahnutý v~buffri.\\
buffer - samotné dáta, ktoré sú predmetom dekódovania\\

{\bfseries Návratová hodnota:}

Re»azec reprezentujúci interpretovanú hodnotu buffra na základ predaného typu.

{\bfseries Hád¾e:}

DataException - Ak je buffer nesprávnej veµkosti vzhµadom na dátový typ\\
UnsupportedDataException - Ak dátový typ nie je podporovaný\\



\textit{public String \textbf{decodeSignedIntegralType}(String type, ByteBuffer buffer)}

Dekóduje celoèíselné znamienkové dátové typy signed8, signed16, signed32 a signed64. Berie ohµad na skrátené dátové typy.

{\bfseries Parametre:}

type - re»azec definujúci dátový typ obsiahnutý v~buffri.\\
buffer - samotné dáta, ktoré sú predmetom dekódovania\\

{\bfseries Návratová hodnota:}

Re»azec reprezentujúci interpretovanú hodnotu buffra na základ predaného typu.

{\bfseries Hád¾e:}

DataException - Ak je buffer nesprávnej veµkosti vzhµadom na dátový typ\\
UnsupportedDataException - Ak dátový typ nie je podporovaný\\




\textit{public String \textbf{decodeFloatType}(String type, ByteBuffer buffer)}

Dekóduje desatinné dátové typy float32 a float64. Berie ohµad na skrátené dátové typy.

{\bfseries Parametre:}

type - re»azec definujúci dátový typ obsiahnutý v~buffri.\\
buffer - samotné dáta, ktoré sú predmetom dekódovania\\

{\bfseries Návratová hodnota:}

Re»azec reprezentujúci interpretovanú hodnotu buffra na základ predaného typu.

{\bfseries Hád¾e:}

DataException - Ak je buffer nesprávnej veµkosti vzhµadom na dátový typ\\
UnsupportedDataException - Ak dátový typ nie je podporovaný\\




\textit{public String \textbf{decodeAddressType}(String type, ByteBuffer buffer)}

Dekóduje dátové typy obsahujúce adresy: ipv4Address, ipv6Address a macAddress.

{\bfseries Parametre:}

type - re»azec definujúci dátový typ obsiahnutý v~buffri.\\
buffer - samotné dáta, ktoré sú predmetom dekódovania\\

{\bfseries Návratová hodnota:}

Re»azec reprezentujúci interpretovanú hodnotu buffra na základ predaného typu.

{\bfseries Hád¾e:}

DataException - Ak je buffer nesprávnej veµkosti vzhµadom na dátový typ\\
UnsupportedDataException - Ak dátový typ nie je podporovaný\\


\clearpage
\textit{public String \textbf{decodeBooleanType}(ByteBuffer buffer)}

Dekóduje boolean reprezentujúci pravdivostnú hodnotu.

{\bfseries Návratová hodnota:}

Re»azec reprezentujúci pravdivostnú hodnotu, "true" alebo "false".

{\bfseries Hád¾e:}

DataException - Ak je buffer nesprávnej veµkosti vzhµadom na dátový typ, alebo ak obsahuje inú hodnotu ako 0 alebo 1\\
UnsupportedDataException - Ak dátový typ nie je podporovaný\\


\textit{public String \textbf{decodeStringType}(ByteBuffer buffer)}

Dekóduje dáta v~buffri ako re»azec v~kódovaní UTF-8.

{\bfseries Návratová hodnota:}

Re»azec v~kódovaní UTF-8.


\textit{public String \textbf{decodeOctetArrayType}(ByteBuffer buffer)}

Dáta v~buffri prevedie na re»azec do kódu Base64.

{\bfseries Návratová hodnota:}

Re»azec predstavujúci binárne dáta zakódované v~Base64.


\textit{public String \textbf{decodeDateTimeType}(String type, ByteBuffer buffer)}

Dekóduje dátové typy èasových známok: dateTimeSeconds, dateTimeMilliseconds, dateTimeMicroseconds a dateTimeNanoseconds.

{\bfseries Parametre:}

type - re»azec definujúci dátový typ obsiahnutý v~buffri.\\
buffer - samotné dáta, ktoré sú predmetom dekódovania\\

{\bfseries Návratová hodnota:}

Re»azec reprezentujúci interpretovanú hodnotu buffra na základ predaného typu.
Dátové typy dateTimeSeconds a dateTimeMilliseconds predstavujú poèet sekúnd, resp. milisekúnd od Unix epochy (00:00 1.1.1970 UTC).
Dátové typy dateTimeMicroseconds a dateTimeNanoseconds sú zakódované vo formáte èasovej známky NTP Timestamp.
Berie sa do úvahy redukované kódovanie prvých dvoch menovaných typov.

{\bfseries Hád¾e:}

DataException - Ak je buffer nesprávnej veµkosti vzhµadom na dátový typ\\
UnsupportedDataException - Ak dátový typ nie je podporovaný\\



\textit{public ByteBuffer \textbf{handleReducedSizeEncoding}(byte[] input, int arraySize, boolean isSigned)}

Vytvorí zo vstupného poµa bajtov buffer stanovenej då¾ky.  

{\bfseries Parametre:}

input - vstupné pole bajtov obsahujúce dáta skráteného informaèného elementu.\\
arraySize - veµkos» informaèného elementu podµa definície v~informaènom modeli IPFIX.\\
isSigned - ak je dátový typ dát vo vstupnom poli bajtov znamienkové èíslo, táto hodnota by mala by» true.\\

{\bfseries Návratová hodnota:}

ByteBuffer obsahujúci informaèný dáta informaèného elementu o~¹tandardnej veµkosti.



\textit{public ByteBuffer \textbf{parseMacAddress}(byte[] input)}

Konvertuje bajty vo vstupnom poli bajtov na re»azec v~tvare XX:XX:XX:XX:XX:XX.

{\bfseries Parametre:}

input - vstupné pole bajtov obsahujúce dáta skráteného informaèného elementu.\\
arraySize - veµkos» informaèného elementu podµa definície v~informaènom modeli IPFIX.\\
isSigned - ak je dátový typ dát vo vstupnom poli bajtov znamienkové èíslo, táto hodnota by mala by» true.\\

{\bfseries Návratová hodnota:}

ByteBuffer obsahujúci informaèný dáta informaèného elementu o~¹tandardnej veµkosti.


% -------------------------------------------





\clearpage
\section{Preklad programu}

\subsection{Zoznam zdrojových textov}
Zdrojové texty sú k~dispozícii v~prílohe diplomovej práce.

\noindent Sú k~dispozícii tieto zdrojové texty:

\begin{verbatim}
- balík sk.tuke.cnl.bm.Mediator:
   Config.java
   Default.java
   DropsCounter.java
   FlowRecordDispatcher.java
   IPLoader.java
   Mediator.java
   Support.java
- balík sk.tuke.cnl.bm.Mediator.IPFIX:
   ExporterKey.java
   FieldSpecifier.java
   IPFIXDataRecord.java
   IPFIXDecoder.java
   IPFIXElements.java
   IPFIXEncoder.java
   IPFIXFlowRecord.java
   IPFIXMessage.java
   IPFIXOptionsTemplateRecord.java
   IPFIXSet.java
   IPFIXTemplateRecord.java
   IpfixUdpTemplateCache.java
   TemplateHolder.java
- balík sk.tuke.cnl.bm.Mediator.IntermediateProcesses:
   AIntermediateProcess.java
   ExampleProcess.java
   IPInputBuffer.java
- balík sk.tuke.cnl.bm.Mediator.collecting:
   IPFIXParser.java
   PacketCache.java
   PacketObject.java
   UDPProcessor.java
   UDPServer.java
- balík sk.tuke.cnl.bm.Mediator.exporting:
   ExportCache.java
   MessageEncoder.java   
   UDPExporter.java
- balík sk.tuke.cnl.bm.exceptions:
   DataException.java
   DataFormatException.java
   EncodingException.java
   IPLoaderException.java
   MediatorException.java
   OutOfBoundsException.java
   TemplateException.java
\end{verbatim}

\subsection{Po¾iadavky na technické prostriedky pri preklade}

Preklad programu si vy¾aduje nasledovnú hardvérovú konfiguráciu:
\begin{itemize}
  \item CPU Intel Pentium III 1Ghz alebo ekvivalent
  \item operaèná pamä» 512MB
  \item pevný disk s~1GB voµného miesta
  \item sie»ová karta 100Mb/s
\end{itemize}
\noindent

\subsection{Po¾iadavky na programové prostriedky pri preklade}
\begin{itemize}
\item operaèný systém GNU/Linux s~verziou jadra 2.6 a vy¹¹ou 
\item Java Runtime Environment (JRE) verzie 1.7.0\_03 a~vy¹¹ej
\item kni¾nice dodávané na in¹talaènom médiu
\end{itemize}

\subsection{Náväznos» na iné programové produkty}

Program umo¾òuje ukladanie dát do databázy alebo ich sprístupnenie priamym pripojením, ktoré budú následne vyhodnotené
príslu¹nými prídavnými modulmi. Je implementáciou zhroma¾ïovacieho procesu architektúry BasicMeter.
Z~toho vyplýva jeho náväznos» na merací a exportovací proces - BEEM, alebo iné implementácie.


\subsection{Vlastný preklad}

Preklad programu spoèíva v~nakopírovaní zdrojových súborov a~spustení kompilátora jazyka
Java s~potrebnými parametrami a~parametrom classpath nastaveným na prídavné kni¾nice.
Odporúèa sa pou¾i» vá¹ obµubený java IDE, kde staèí jednoducho nastavi» verziu JDK na 7.0
alebo vy¹¹ie a~do cesty classpath prida» cesty ku v¹etkým potrebným kni¾niciam. V~prostredí
Netbeans IDE potom staèí kliknú» na tlaèidlo \textit{Clean and Build}.

\subsection{Vytvorenie in¹talaèného DEB súboru}
Staèí spusti» skript \texttt{buildDeb.sh}, ktorý sa nachádza v~prieèinku jxcoll/deb.

\begin{center}
\texttt{sh buildDeb.sh }
\end{center}

Výstupom tohto skriptu je súbor s~názvom \texttt{debian.deb}, ktorý mô¾me následne premenova» podµa verzie JXColl 
(napríklad na jxcoll\_3.9\_i386.deb). 
Tento skript vykonáva nasledovné:

\begin{enumerate}
\item v~prípade, ak neexistuje prieèinok debian, extrahuje ho z~archívu debian.tar.gz, inak tento krok preskoèí
\item v~prípade, ak neexistuje prieèinok debian, extrahuje ho z~archívu debian.tar.gz, inak tento krok preskoèí
\item skopíruje binárny súbor z~projektu do DEB balíèka (predpokladá sa, ¾e bol program kompilovaný v~Netbeans IDE pomocou Clean and Build tlaèidla)
\item skopíruje konfiguraèný súbor z~projektu do DEB balíèka
\item skopíruje IPFIX definièný súbor z~projektu do DEB balíèka
\item vyma¾e prípadné doèasné súbory z~DEB balíèka
\item vygeneruje MD5 kontrolné súèty pre v¹etky súbory DEB balíèka
\item zabezpeèí maximálnu kompresiu manuálových stránok a changelog súborov
\item skopíruje binárny súbor z~projektu do DEB balíèka a nastaví mu práva na vykonávanie
\item vytvorí samotný DEB balíèek
\item overí ho pomocou programu lintian - ten vypí¹e prípadne varovania a/alebo chyby
\item archivuje vytvorený DEB balíèek do archívu debian.tar.gz
\end{enumerate}

Pred spustením skriptu je nutné skompilova» JXColl pomocou Netbeans IDE tlaèidlom \textit{Clean and Build}. Prípadné zmeny control alebo changelog súboru, manuálových stránok je nutné vykona» ruène. Manuálové stránky je vhodné upravi» pomocou programu \textit{GmanEdit} . Po spustení skriptu sa vytvorí DEB balíèek s~názvom \texttt{debian.deb}. Ten je vhodné premenova» podµa aktuálnej verzie. Vytvorí sa aj archív \texttt{debian.tar.gz}, ktorý obsahuje najaktuálnej¹iu adresárovú ¹truktúru DEB balíèka pre budúce vyu¾itie (ak neexistuje prieèinok debian, vytvorí sa extrakciou z~tohto archívu). Ak je potrebné len aktualizova» kód, staèí spusti» skript a ten sa o~v¹etko postará, prièom vytvorí aj adresár debian. Súbory mo¾no v~òom upravova» a¾ kým nie je v¹etko podµa predstáv. Ak je v¹etko hotové, v~Netbeans IDE je potrebné vymaza» prieèinok debian (vykoná sa SVN DELETE, namiesto obyèajného odstránenia zo súborového systému) a projekt ''commitnú»''.

\subsection{Opis známych chýb}
V~súèasnosti nie sú známe ¾iadne vá¾ne chyby.


\newpage
\section{Zhodnotenie rie¹enia}
Hlavným cieµom práce bolo zvý¹i» interoperabilitu s~inými IPFIX rie¹eniami pomocou zvý¹enia konformity so ¹tandardom IPFIX. 
V~práci boli vyrie¹ené problémy, ktoré doteraz znemo¾òovali dekódovanie viacerých záznamov sade, informaèncých elementov s~variabilnou då¾kou, informaèných elementov s~redukovaným kódovaním alebo niektorých predtým neimplementovaných dátových typov. 

Súèas»ou práce bolo roz¹írenie podpory prenosu údajov o~tokoch prostredníctvom transportných protokolov TCP a SCTP, èo zvy¹uje mo¾nosti
nasadenia nástroja BasicMeter aj v~podmienkach s~vy¹¹ou náchylnos»ou na pre»a¾enie v~sieti. 

Mo¾nosti budúceho vývoja zhroma¾ïovacieho procesu nástroja BasicMeter predstavuje implementácia podpory pre dátové typy umo¾òujúce
prenos ¹truktúrovaných dát a podpora pre zabezpeèené pripojenia od exportérov.


\addcontentsline{toc}{section}{\numberline{}Zoznam pou¾itej literatúry}
\begin{thebibliography}{999}

\harvarditem{Kobayashi, Claise}{2010}{rfc5982}
KOBAYASHI, A. -- CLAISE, B. et al.: \emph{IP Flow Information Export (IPFIX) Mediation: Problem Statement.} 
RFC 5982. 2010

\harvarditem{Kobayashi et al.}{2011}{rfc6183}
KOBAYASHI, A. et al.: \emph{IP Flow Information Export (IPFIX) Mediation: Framework.} 
RFC 6183. 2011

\harvarditem{Sadasivan, et al.}{2009}{rfc5470}
SADASIVAN, G. et al.: \emph{Architecture for IP Flow Information Export} 
RFC 5470. 2009

\harvarditem{Claise}{2004}{rfc3954}
CLAISE, B.: \emph{Cisco Systems NetFlow Services Export Version 9.} 
RFC 3954. 2004

\harvarditem{Vere¹èák}{2012}{jxcoll_sp}
VERE©ÈÁK, T.: Optimalizácia zhroma¾ïovacieho procesu nástroja BasicMeter, 2012,
Diplomová práca, Príloha A, Systémová príruèka JXColl v3.9, KPI FEI TU, Ko¹ice

%
%\noindent [2]  Pekár, A.: Meranie prevádzkových parametrov siete v~reálnom èase, 2009,
%Bakalárska práca, KPI FEI TU, Ko¹ice
%
%
%\noindent [4]  Pekár, A.: Optimalizácia zhroma¾ïovacieho procesu nástroja BasicMeter, 2011,
%Diplomová práca, KPI FEI TU, Ko¹ice
\end{thebibliography}