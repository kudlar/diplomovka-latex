%%%%%%%%%%%%%%%%%%%%%%% file pestova.tex %%%%%%%%%%%%%%%%%%%%%%%%%
%
% Toto je zdrojovy subor LaTeXu, ktory treba pouzit ako sablonu pre vas  
% clanok - nakopirujte ho do noveho suboru VASE 'priezvisko.tex' 
% a zmodifikujte.
%
% Clanok musi byt napisany po anglicky v zakladnom kode ASCII s medzinarodnym kodovanim akcentov
% teda nesmie byt pouzity \usepackage{slovak}.
%
% Subor 'priezvisko.tex' a vsetky obrazky (jpg, png, alebo pdf) pouzite v prostredi figures
% musia byt umiestnene v podadresari 'priezvisko' adresara 'template'. 
%
% POUZIVAJTE medzinarodne akcenty, teda \"a namiesto (ä), \'a namiesto (á), \v{c} namiesto (è), \softL namiesto (¼), ...
% Teda NEMOZNO POUZIVAT PRIAMO žiadny makcen, dlzen, apod !!!!!!!!!!
% NEMOZNO pridavat ani ziadne dalsie baliky, a to ani do suboru priezvisko.tex, ani do hlavneho suboru template.tex
% teda nesmie byt doplneny ziadny z tychto dvoch suborov o
% \usepackage{....}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% NIZSIE TREBA POZORNE A DOSLEDNE PONAHRADZAT TOTO:

% NAHRADTE TENTO NAZOV VLASTNYM UPLNYM NAZVOM SVOJHO CLANKU
\title{IPFIX Mediation Framework of the SLAmeter Tool}

% NAHRADTE TENTO SKRATENY NAZOV SKRATENYM NAZVOM SVOJHO CLANKU
\titlerunning{IPFIX Mediation Framework}

% NAHRADTE AUTOROV (s plnymi menami a priezviskami, medzinarodne kodovane a oddelene pomocou \and
\author{Rastislav Kudla \and Peter Feci\softl ak \and Adri\'an Pek\'ar}

% NAHRADTE OPAT AUTOROV (s inicialami mien a priezviskami, medzinarodne kodovane a oddelene pomocou \and
\authorrunning{R. Kudla \and P. Feci\softl ak \and A. Pek\'ar}

% TOTO NEMENTE
\institute{Department of Computers and Informatics\\
Technical University of Ko\v{s}ice, Letn\'a 9, 042 00 Ko\v{s}ice, Slovakia\\
% OR ADD another institute
% \and
% Other Institute\\
}

%% OPATOVNE NAHRADTE UPLNY NAZOV CLANKU A AUTOROV S UPLNYMI MENAMI,
%% ALE TENTOKRAT ICH NEODDELUJTE pomocou \and, ale iba pomocou and (teda bez spatnej lomky)
%% na zaklade nasledujucich dvoch riadkov totiz sa dostanu informacie o nazve a autoroch
%% do obsahu zbornika (to contents)
\toctitle{IPFIX Mediation Framework of the SLAmeter Tool}
\tocauthor{Rastislav Kudla, Peter Feci\softl ak and Adri\'an Pek\'ar}
\maketitle

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% A TERAZ MOZETE MODIFIKOVAT NASLEDUJUCI OBSAH PODLA OBSAHU SVOJHO CLANKU
% ACKNOWLEDGEMENT nechajte tak ako je, ak vam vas veduci nepovie inak. 
%

\begin{abstract}
Presented paper deals with the IP Flow Information Export (IPFIX) Mediation Problem. 
The problem was elaborated by IPFIX working group in RFC~5982 and RFC~6183.
The aim of this work is to design and implement an IPFIX Mediation Framework of the 
SLAmeter monitoring tool based on these documents. 
The analytical part is devoted to the IPFIX protocol and the IPFIX Mediation 
Problem. Monitoring applications SLAmeter and BasicMeter are analysed as well. 
The core part of the paper 
is represented by the design and description of~implementation workflow of~IPFIX Mediation Framework. 
Accuracy of solutions is confirmed by experimental verification at the end of the paper. The main
contribution of this work is to extend the possibilities of monitoring application SLAmeter.

\keywords{IPFIX, Mediation, Mediator, Collector, Exporter, SLAmeter, BasicMeter, MONICA}
\end{abstract}


\section{Introduction}

The trend of recent years in computer networking are converged networks which combine data, 
voice and video transmission into one common infrastructure. However, with increasing growth 
of~opportunities raises demand for~quality. In~order~to compare or even increase quality 
of~networks and service, it is necessary to have the ability to measure network parameters.

SLAmeter is measuring architecture being developed by the MONICA research group in Computer 
Networks Laboratory at the Technical University of Ko\v{s}ice. It is a tool for passive 
flow-based measurement and subsequent network traffic analysis with the purpose of determing 
the grade of network quality.

Flow-based measurement is a popular method for various network
monitoring usages. The sharing of flow-based information for
monitoring applications having different requirements raises some
open issues in terms of measurement system scalability, flow-based
measurement flexibility, and export reliability. that IP Flow
Information Export (IPFIX) Mediation may help resolve.



% In the field of software engineering the traditional programming style is fading in 
% the recent years.  The traditional approach of software development obeys the life 
% cycle:  analysis - design - implementation - maintenance. The development in the way 
% of traditional approach can be seen as a continual cycle, started be the change of 
% the requirements. 
% 
% The relationship between the requirements and their software implementation is more 
% complex than just a simple dependency in one or more directions. The requirements 
% react and change with their realization. In this point of view the specification and 
% realization of the requirements are inseparable \cite{Anl}. Therefore the challenge 
% lies in finding a method, which would help to understand and support the adaptability 
% and evolution of the software systems according the input requirements. 
% 
% The topic of this work is to give some indication on how the access to the evolution 
% and adaptability can be provided. Moreover, the work attempts to give some other view 
% on software development.


\section{Goals}

The goal of this work is to design mechanism based on algebraic relations in 
evolution model. Based on semantic of pointcut designators (as they are defined in 
AspectJ) to identify the pointcuts in evolution model. The mechanism illustrate on 
simple example.

\section{Analysis}

A new sight on software development brings an aspect oriented programming 
\cite{Kol3,Kol1}. This sight mentions on the availability of evolution in the 
designing phase of software development. Based on semantic of pointcut designators 
(as they are defined in AspectJ \cite{Kic}) can be in the data flow diagram of the 
designed system identified the pointcuts.  In this pointcuts are inserted functions 
(events  \cite{Hud}). The selection of the functions into the pointcuts can be 
adapted according some requirements. In this work it is requirement on run time. It 
is time, which the system needed to reached the final state, moving from the 
beginning state.

To be able to know, if the designed system meets the run time requirement, the time 
evaluation for this system must be counted. 
The method, which is used for calculating starting and end - time of activities in 
software management, is critical path method. This method can be used for acyclic 
data flow diagrams. For this characteristic of this method it couldn't be used for 
counting the run time of the system. The data flow diagram of the system may contain 
a cycle. Because in the designing phase it is not clear how many times the cycle will 
be executed, only one execution of the cycle is considered. If the requirement is not 
accomplish for one execution, it could not be accomplish for more executions.

To solve the run time computation, two approaches were considered. The first one is 
based on the idea of the cycle compensation by one place (memory cell \cite{Kol2}) in 
data flow diagram (Fig. \ref{fig:opestova1}). The disadvantage of this method is, 
that it will be difficult to write an algorithm to find and replace the cycles. 

% \begin{figure}[htb]
% \centering
% \includegraphics[height=6.2cm]{pestova/opestova1.jpg}
% \caption{Compensation of cycle by one place.}
% \label{fig:opestova1}
% \end{figure}

The second one is to count the run time by table. This is more easier, because it is 
established on simple computation of the table (see table ~\ref{tab:opestova1}). 

\tabcolsep=8pt
\begin{table}[!ht]\caption{Table for graf b) form figure 
\ref{fig:opestova1}.}\label{tab:opestova1}
\smallskip
\centering
\begin{tabular}{|l|c|c|} \hline
Place & Preconditions & Time evaluation \\ \hline
a & - & 0 s\\ \hline
b & a & 10 s\\ \hline
f & b & 20 s\\ \hline
\end{tabular}
\end{table}


\section{Solution and Results}

\subsection{The design of deduction mechanism in evolution model}

The ambition to achieve some evolution in the designing phase of software development 
is based on the idea that the selection of the functions (events, which should be 
used for the implementation of the system) can be adapted according some 
requirements. A deduction mechanism has been designed to reach this goal. This  
mechanism works with run time (time, which need the system to reach the final state, 
moving from the beginning state) requirement. This mechanism is inspired by 
biological evolution. From the generated variants of solution (designed by this 
mechanism) are selected only the ones, that accomplish the compliance with the 
requirement. From them is selected the best one. The mechanism is described in follow 
steps: 

\begin{enumerate}
\item  For the designed system a data flow diagram (desribing the flow of data in 
this system) is designed.

\item  Then the file of functions (representsenting the events in the designed 
system) is created.
 
\item  In the data flow diagram the pointcuts are identified.

\item  Then the pointcuts are devided according the number of transfers, oriented 
into this pointcut.

\item  The functions from input file are devided according the number of arguments, 
too. 

\item  A check must be run, to determine whether a compatible group of functions 
exists for each group of pointcuts. For example: for the group of pointcuts, where 
only one transfer is oriented inside, a group of functions with only one agument is 
considered compatible. 
 
\item  Number of members is counted for each group of pointcuts and group of 
functions.

\item  All combinations (how can be functions inserted into compatible pointcuts) are 
generate for each group of pointcuts. 

\item  Accordingly the combinations variants of realization (of the designed system) 
are generated.

\item The max run time value is choosed. This time is the upper limit.

\item The begining marking is inserted.

\item According to the next algorithm the time evaluation for each variant is 
calculated.

	\begin{enumerate}
	\item	The table for each variant is created.
	\item   The time evaluation calculation is started with table item, which all of 
its preconditions have been marked. If such item doesn't exist, the calculation is 
stoped.
	\item   In the next step, items, whose all preconditions have marking or some 
value are calculated. If such item doesn't exist, the calculation is stoped.
	\end{enumerate}

\item The generated variants are divided into the group of usable or unusable 
according to the results form step 12. The variant with the shortest run time is 
choosen, assuming this run time does not exceed the limit. 

\end{enumerate}

The figure \ref{fig:opestova3} shows the example of this mechanism on the design of 
the system, which should realize a simple mathematical expression (\ref{simatexp}). 

\begin{equation} \label{simatexp}
-\ (\ (\ a\ *\ b\ )\ -\ c\ ) 
\end{equation}


% \begin{figure}[htb]
% \centering
% \includegraphics[height=10cm]{pestova/opestova2.jpg}
% \label{fig:opestova2}
% \end{figure}


\clearpage 

% \begin{figure}[htb]
% \centering
% \includegraphics[height=13cm]{pestova/opestova3.jpg}
% \caption{Example shows mechanism on the design of the system, which should realize a 
% simple mathematical expression $- (( a * b ) - c)$}
% \label{fig:opestova3}
% \end{figure}

%% NEMENTE sekciu acknowledgement, ak vam vas veduci nepovie inak
\section{Acknowledgment}

This work is the result of the project implementation: Development of the Center of Information and 
Communication Technologies for Knowledge Systems (ITMS project code: 26220120030) supported 
by the Research \& Development Operational Program funded by the ERDF.

\section{Conclusion}

The goal of this work was to design mechanism established on algebraic relations in 
evolution model. Based on semantic of pointcut designators (as they are defined in 
AspectJ) to identify the pointcuts in evolution model.

The method provides some advantages. In the implementation phase it is clear, whether 
the specified requirements can be reached. Secondary, some partial automation may be 
brought into the software development process.

There are also some disadvantages consider. Some of the generated variants are not 
the realization of the system. With growing number of functions and pointcuts, the 
time needed for generating all variants grows. Therefore the application of this 
method is effective for small systems only. This disadvantages might be improved by 
the next research.


%% POZOR: AJ V ZOZNAME LITERATURY TREBA POUZIT MEDZINARODNE KODOVANIE
\begin{thebibliography}{4}
%
\bibitem{Anl}
Anlauff Matthias, Pavlovic Dusko, Smith  R. Douglas: Composition and Refinement of 
Evolving Specifications. In: Kestrel Institute, Palo Alto, California 94304, USA. , 
26-29 Nov. 2001, pp.~157--165
%
\bibitem{Hud}
Hud\'ak \v{S}tefan: \textit{Roz\v{s}\'\i renia Petriho siet\'\i .} Habilitaèn\'a pr\'aca. Vysok\'a \v{s}škola 
technick\'a v Ko\v{s}iciach. Elektrotechnick\'a fakulta. Ko\v{s}ice, 1980. 107~p.
%
\bibitem{Kic}
Kicyale Gregor, Hilsdale Erik, Hugunin Jim, Kersten Mik, Palm Jeffrey, Griswold G. 
William: An Overview of AspectJ. Department of Computer Science, University of 
British Columbia, Vancouver, 2005, 354~p.
%
\bibitem{Kol1}
Koll\'ar J\'an: Structural Proposition for Aspect Oriented Software Evolution. 
Proceedinds of 7-th International Scientific Conference ECI'2006, Ko\v{s}ice - Her\softl any, 
Sep. 20-22, 2006, 
pp.~180--185
%
\bibitem{Kol2}
Koll\'ar J\'an, Novitzk\'a Valerie: Semantical Equivalence of Process Functional and 
Imperative Programs. Acta Polytechnica Hungarica, Vol. 1, No. 2, 2004, pp.~113--124
%
\bibitem{Kol3}
Koll\'ar J\'an, T\'oth Marcel: An Experiment with Aspect Programming Language. Proceedings 
of 3-rd Slovakian-Hungarian Joint Symposium on Applied Machine Intelligence, Her\softl any, 
Slovakia, Jan 21-22, 2005, pp.~225--235
\end{thebibliography}

